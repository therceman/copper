<?php


namespace Copper\Component\DB;


use Copper\Handler\ArrayHandler;

class DBMatchColumnMod extends DBColumnMod
{
    /**
     * @var bool
     */
    public $globalRequired;

    /**
     * @var bool
     */
    public $globalAnyEnd;

    /**
     * @var bool
     */
    public $globalAnyStart;

    /**
     * @var array
     */
    public $column_list;

    /**
     * @var DBMatchColumnModValue[]
     */
    public $values;

    /**
     * @param array $column_list
     * @return DBMatchColumnMod
     */
    public static function columns(array $column_list)
    {
        $mod = new self();

        $mod->column_list = $column_list;

        return $mod;
    }

    /**
     * @param array|DBMatchColumnModValue[] $values
     * @return DBMatchColumnMod
     */
    public function values($values)
    {
        foreach ($values as $value) {
            if ($value instanceof DBMatchColumnModValue)
                $this->values[] = $value;
            else
                $this->values[] = new DBMatchColumnModValue($value);
        }

        return $this;
    }

    /**
     * @return string|void
     */
    private function buildStatement()
    {
        // DBColumnMod::statement("MATCH (name, name_lv, name_en) AGAINST ('+семечки* +жареные* +отбор*' IN BOOLEAN MODE)", [])

        $value_str_list = [];

        foreach ($this->values as $value) {
            $required = $this->globalRequired ?? $value->required;
            $anyStart = $this->globalAnyStart ?? $value->anyStart;
            $anyEnd = $this->globalAnyEnd ?? $value->anyEnd;

            $val_req = ($required) ? '+' : '';
            $val_start = ($anyStart) ? '*' : '';
            $val_middle = $value->value;
            $val_end = ($anyEnd) ? '*' : '';

            $value_str_list[] = $val_req . $val_start . DBService::escapeStr($val_middle) . $val_end;
        }

        $value_str = ArrayHandler::join($value_str_list, ' ');

        $column_str_list = [];

        foreach ($this->column_list as $column) {
            $column_str_list[] = DBModel::formatFieldName($column, true);
        }

        $column_str = ArrayHandler::join($column_str_list);

        $statement_str = 'MATCH (' . $column_str . ') AGAINST (\'' . $value_str . '\' IN BOOLEAN MODE)';

        return $this->createStatement($statement_str, []);
    }

    /**
     * @return string|null
     */
    public function getCraftedStatement()
    {
        $this->statement = $this->buildStatement();

        return parent::getCraftedStatement(); // TODO: Change the autogenerated stub
    }

    /**
     * @param bool $bool
     * @return $this
     */
    public function setGlobalRequired($bool = true)
    {
        $this->globalRequired = $bool;
        return $this;
    }

    /**
     * @param bool $bool
     * @return $this
     */
    public function setGlobalAnyStart($bool = true)
    {
        $this->globalAnyStart = $bool;
        return $this;
    }

    /**
     * @param bool $bool
     * @return $this
     */
    public function setGlobalAnyEnd($bool = true)
    {
        $this->globalAnyEnd = $bool;
        return $this;
    }
}