<?php


namespace Copper\Component\DB;


class DBErrorCode
{
    const ER_HASHCHK = 1000; // hashchk
    const ER_NISAMCHK = 1001; // isamchk
    const ER_NO = 1002; // NO
    const ER_YES = 1003; // YES
    const ER_CANT_CREATE_FILE = 1004; // Can't create file '%s' (errno: %d)
    const ER_CANT_CREATE_TABLE = 1005; // Can't create table '%s' (errno: %d)
    const ER_CANT_CREATE_DB = 1006; // Can't create database '%s' (errno: %d
    const ER_DB_CREATE_EXISTS = 1007; // Can't create database '%s'; database exists
    const ER_DB_DROP_EXISTS = 1008; // Can't drop database '%s'; database doesn't exist
    const ER_DB_DROP_DELETE = 1009; // Error dropping database (can't delete '%s', errno: %d)
    const ER_DB_DROP_RMDIR = 1010; // Error dropping database (can't rmdir '%s', errno: %d)
    const ER_CANT_DELETE_FILE = 1011; // Error on delete of '%s' (errno: %d)
    const ER_CANT_FIND_SYSTEM_REC = 1012; // Can't read record in system table
    const ER_CANT_GET_STAT = 1013; // Can't get status of '%s' (errno: %d)
    const ER_CANT_GET_WD = 1014; // Can't get working directory (errno: %d)
    const ER_CANT_LOCK = 1015; // Can't lock file (errno: %d)
    const ER_CANT_OPEN_FILE = 1016; // Can't open file: '%s' (errno: %d)
    const ER_FILE_NOT_FOUND = 1017; // Can't find file: '%s' (errno: %d)
    const ER_CANT_READ_DIR = 1018; // Can't read dir of '%s' (errno: %d)
    const ER_CANT_SET_WD = 1019; // Can't change dir to '%s' (errno: %d)
    const ER_CHECKREAD = 1020; // Record has changed since last read in table '%s'
    const ER_DISK_FULL = 1021; // Disk full (%s); waiting for someone to free some space...
    const ER_DUP_KEY = 1022; // Can't write; duplicate key in table '%s'
    const ER_ERROR_ON_CLOSE = 1023; // Error on close of '%s' (errno: %d)
    const ER_ERROR_ON_READ = 1024; // Error reading file '%s' (errno: %d)
    const ER_ERROR_ON_RENAME = 1025; // Error on rename of '%s' to '%s' (errno: %d)
    const ER_ERROR_ON_WRITE = 1026; // Error writing file '%s' (errno: %d)
    const ER_FILE_USED = 1027; // '%s' is locked against change
    const ER_FILSORT_ABORT = 1028; // Sort aborted
    const ER_FORM_NOT_FOUND = 1029; // View '%s' doesn't exist for '%s'
    const ER_GET_ERRN = 1030; // Got error %d from storage engine
    const ER_ILLEGAL_HA = 1031; // Table storage engine for '%s' doesn't have this option
    const ER_KEY_NOT_FOUND = 1032; // Can't find record in '%s'
    const ER_NOT_FORM_FILE = 1033; // Incorrect information in file: '%s'
    const ER_NOT_KEYFILE = 1034; // Incorrect key file for table '%s'; try to repair it
    const ER_OLD_KEYFILE = 1035; // Old key file for table '%s'; repair it!
    const ER_OPEN_AS_READONLY = 1036; // Table '%s' is read only
    const ER_OUTOFMEMORY = 1037; // Out of memory; restart server and try again (needed %d bytes)
    const ER_OUT_OF_SORTMEMORY = 1038; // Out of sort memory, consider increasing server sort buffer size
    const ER_UNEXPECTED_EOF = 1039; // Unexpected EOF found when reading file '%s' (Errno: %d)
    const ER_CON_COUNT_ERROR = 1040; // Too many connections
    const ER_OUT_OF_RESOURCES = 1041; // Out of memory; check if mysqld or some other process uses all available memory; if not, you may have to use 'ulimit' to allow mysqld to use more memory or you can add more swap space
    const ER_BAD_HOST_ERROR = 1042; // Can't get hostname for your address
    const ER_HANDSHAKE_ERROR = 1043; // Bad handshake
    const ER_DBACCESS_DENIED_ERROR = 1044; // Access denied for user '%s'@'%s' to database '%s'
    const ER_ACCESS_DENIED_ERROR = 1045; // Access denied for user '%s'@'%s' (using password: %s)
    const ER_NO_DB_ERROR = 1046; // No database selected
    const ER_UNKNOWN_COM_ERROR = 1047; // Unknown command
    const ER_BAD_NULL_ERROR = 1048; // Column '%s' cannot be null
    const ER_BAD_DB_ERROR = 1049; // Unknown database '%s'
    const ER_TABLE_EXISTS_ERROR = 1050; // Table '%s' already exists
    const ER_BAD_TABLE_ERROR = 1051; // Unknown table '%s'
    const ER_NON_UNIQ_ERROR = 1052; // Column '%s' in %s is ambiguous
    const ER_SERVER_SHUTDOWN = 1053; // Server shutdown in progress
    const ER_BAD_FIELD_ERROR = 1054; // Unknown column '%s' in '%s'
    const ER_WRONG_FIELD_WITH_GROUP = 1055; // '%s' isn't in GROUP BY
    const ER_WRONG_GROUP_FIELD = 1056; // Can't group on '%s'
    const ER_WRONG_SUM_SELECT = 1057; // Statement has sum functions and columns in same statement
    const ER_WRONG_VALUE_COUNT = 1058; // Column count doesn't match value count
    const ER_TOO_LONG_IDENT = 1059; // Identifier name '%s' is too long
    const ER_DUP_FIELDNAME = 1060; // Duplicate column name '%s'
    const ER_DUP_KEYNAME = 1061; // Duplicate key name '%s'
    const ER_DUP_ENTRY = 1062; // Duplicate entry '%s' for key %d
    const ER_WRONG_FIELD_SPEC = 1063; // Incorrect column specifier for column '%s'
    const ER_PARSE_ERROR = 1064; // %s near '%s' at line %d
    const ER_EMPTY_QUERY = 1065; // Query was empty
    const ER_NONUNIQ_TABLE = 1066; // Not unique table/alias: '%s'
    const ER_INVALID_DEFAULT = 1067; // Invalid default value for '%s'
    const ER_MULTIPLE_PRI_KEY = 1068; // Multiple primary key defined
    const ER_TOO_MANY_KEYS = 1069; // Too many keys specified; max %d keys allowed
    const ER_TOO_MANY_KEY_PARTS = 1070; // Too many key parts specified; max %d parts allowed
    const ER_TOO_LONG_KEY = 1071; // Specified key was too long; max key length is %d bytes
    const ER_KEY_COLUMN_DOES_NOT_EXITS = 1072; // Key column '%s' doesn't exist in table
    const ER_BLOB_USED_AS_KEY = 1073; // BLOB column '%s' can't be used in key specification with the used table type
    const ER_TOO_BIG_FIELDLENGTH = 1074; // Column length too big for column '%s' (max = %lu); use BLOB or TEXT instead
    const ER_WRONG_AUTO_KEY = 1075; // Incorrect table definition; there can be only one auto column and it must be defined as a key
    const ER_READY = 1076; // %s: ready for connections. Version: '%s' socket: '%s' port: %d
    const ER_NORMAL_SHUTDOWN = 1077; // %s: Normal shutdown
    const ER_GOT_SIGNAL = 1078; // %s: Got signal %d. Aborting!
    const ER_SHUTDOWN_COMPLETE = 1079; // %s: Shutdown complete
    const ER_FORCING_CLOSE = 1080; // %s: Forcing close of thread %ld user: '%s'
    const ER_IPSOCK_ERROR = 1081; // Can't create IP socket
    const ER_NO_SUCH_INDEX = 1082; // Table '%s' has no index like the one used in CREATE INDEX; recreate the table
    const ER_WRONG_FIELD_TERMINATORS = 1083; // Field separator argument is not what is expected; check the manual
    const ER_BLOBS_AND_NO_TERMINATED = 1084; // You can't use fixed rowlength with BLOBs; please use 'fields terminated by'
    const ER_TEXTFILE_NOT_READABLE = 1085; // The file '%s' must be in the database directory or be readable by all
    const ER_FILE_EXISTS_ERROR = 1086; // File '%s' already exists
    const ER_LOAD_INF = 1087; // Records: %ld Deleted: %ld Skipped: %ld Warnings: %ld
    const ER_ALTER_INF = 1088; // Records: %ld Duplicates: %ld
    const ER_WRONG_SUB_KEY = 1089; // Incorrect prefix key; the used key part isn't a string, the used length is longer than the key part, or the storage engine doesn't support unique prefix keys
    const ER_CANT_REMOVE_ALL_FIELDS = 1090; // You can't delete all columns with ALTER TABLE; use DROP TABLE instead
    const ER_CANT_DROP_FIELD_OR_KEY = 1091; // Can't DROP '%s'; check that column/key exists
    const ER_INSERT_INF = 1092; // Records: %ld Duplicates: %ld Warnings: %ld
    const ER_UPDATE_TABLE_USED = 1093; // You can't specify target table '%s' for update in FROM clause
    const ER_NO_SUCH_THREAD = 1094; // Unknown thread id: %lu
    const ER_KILL_DENIED_ERROR = 1095; // You are not owner of thread %lu
    const ER_NO_TABLES_USED = 1096; // No tables used
    const ER_TOO_BIG_SET = 1097; // Too many strings for column %s and SET
    const ER_NO_UNIQUE_LOGFILE = 1098; // Can't generate a unique log-filename %s.(1-999)
    const ER_TABLE_NOT_LOCKED_FOR_WRITE = 1099; // Table '%s' was locked with a READ lock and can't be updated
    const ER_TABLE_NOT_LOCKED = 1100; // Table '%s' was not locked with LOCK TABLES
    const ER_BLOB_CANT_HAVE_DEFAULT = 1101; // BLOB/TEXT column '%s' can't have a default value
    const ER_WRONG_DB_NAME = 1102; // Incorrect database name '%s'
    const ER_WRONG_TABLE_NAME = 1103; // Incorrect table name '%s'
    const ER_TOO_BIG_SELECT = 1104; // The SELECT would examine more than MAX_JOIN_SIZE rows; check your WHERE and use SET SQL_BIG_SELECTS=1 or SET MAX_JOIN_SIZE=# if the SELECT is okay
    const ER_UNKNOWN_ERROR = 1105; // Unknown error
    const ER_UNKNOWN_PROCEDURE = 1106; // Unknown procedure '%s'
    const ER_WRONG_PARAMCOUNT_TO_PROCEDURE = 1107; // Incorrect parameter count to procedure '%s'
    const ER_WRONG_PARAMETERS_TO_PROCEDURE = 1108; // Incorrect parameters to procedure '%s'
    const ER_UNKNOWN_TABLE = 1109; // Unknown table '%s' in %s
    const ER_FIELD_SPECIFIED_TWICE = 1110; // Column '%s' specified twice
    const ER_INVALID_GROUP_FUNC_USE = 1111; // Invalid use of group function
    const ER_UNSUPPORTED_EXTENSION = 1112; // Table '%s' uses an extension that doesn't exist in this MariaDB version
    const ER_TABLE_MUST_HAVE_COLUMNS = 1113; // A table must have at least 1 column
    const ER_RECORD_FILE_FULL = 1114; // The table '%s' is full
    const ER_UNKNOWN_CHARACTER_SET = 1115; // Unknown character set: '%s'
    const ER_TOO_MANY_TABLES = 1116; // Too many tables; MariaDB can only use %d tables in a join
    const ER_TOO_MANY_FIELDS = 1117; // Too many columns
    const ER_TOO_BIG_ROWSIZE = 1118; // Row size too large. The maximum row size for the used table type, not counting BLOBs, is %ld. You have to change some columns to TEXT or BLOBs
    const ER_STACK_OVERRUN = 1119; // Thread stack overrun: Used: %ld of a %ld stack. Use 'mysqld --thread_stack=#' to specify a bigger stack if needed
    const ER_WRONG_OUTER_JOIN = 1120; // Cross dependency found in OUTER JOIN; examine your ON conditions
    const ER_NULL_COLUMN_IN_INDEX = 1121; // Table handler doesn't support NULL in given index. Please change column '%s' to be NOT NULL or use another handler
    const ER_CANT_FIND_UDF = 1122; // Can't load function '%s'
    const ER_CANT_INITIALIZE_UDF = 1123; // Can't initialize function '%s'; %s
    const ER_UDF_NO_PATHS = 1124; // No paths allowed for shared library
    const ER_UDF_EXISTS = 1125; // Function '%s' already exists
    const ER_CANT_OPEN_LIBRARY = 1126; // Can't open shared library '%s' (Errno: %d %s)
    const ER_CANT_FIND_DL_ENTRY = 1127; // Can't find symbol '%s' in library
    const ER_FUNCTION_NOT_DEFINED = 1128; // Function '%s' is not defined
    const ER_HOST_IS_BLOCKED = 1129; // Host '%s' is blocked because of many connection errors; unblock with 'mysqladmin flush-hosts'
    const ER_HOST_NOT_PRIVILEGED = 1130; // Host '%s' is not allowed to connect to this MariaDB server
    const ER_PASSWORD_ANONYMOUS_USER = 1131; // You are using MariaDB as an anonymous user and anonymous users are not allowed to change passwords
    const ER_PASSWORD_NOT_ALLOWED = 1132; // You must have privileges to update tables in the mysql database to be able to change passwords for others
    const ER_PASSWORD_NO_MATCH = 1133; // Can't find any matching row in the user table
    const ER_UPDATE_INF = 1134; // Rows matched: %ld Changed: %ld Warnings: %ld
    const ER_CANT_CREATE_THREAD = 1135; // Can't create a new thread (Errno %d); if you are not out of available memory, you can consult the manual for a possible OS-dependent bug
    const ER_WRONG_VALUE_COUNT_ON_ROW = 1136; // Column count doesn't match value count at row %ld
    const ER_CANT_REOPEN_TABLE = 1137; // Can't reopen table: '%s'
    const ER_INVALID_USE_OF_NULL = 1138; // Invalid use of NULL value
    const ER_REGEXP_ERROR = 1139; // Got error '%s' from regexp
    const ER_MIX_OF_GROUP_FUNC_AND_FIELDS = 1140; // Mixing of GROUP columns (MIN(),MAX(),COUNT(),...) with no GROUP columns is illegal if there is no GROUP BY clause
    const ER_NONEXISTING_GRANT = 1141; // There is no such grant defined for user '%s' on host '%s'
    const ER_TABLEACCESS_DENIED_ERROR = 1142; // %s command denied to user '%s'@'%s' for table '%s'
    const ER_COLUMNACCESS_DENIED_ERROR = 1143; // %s command denied to user '%s'@'%s' for column '%s' in table '%s'
    const ER_ILLEGAL_GRANT_FOR_TABLE = 1144; // Illegal GRANT/REVOKE command; please consult the manual to see which privileges can be used
    const ER_GRANT_WRONG_HOST_OR_USER = 1145; // The host or user argument to GRANT is too long
    const ER_NO_SUCH_TABLE = 1146; // Table '%s.%s' doesn't exist
    const ER_NONEXISTING_TABLE_GRANT = 1147; // There is no such grant defined for user '%s' on host '%s' on table '%s'
    const ER_NOT_ALLOWED_COMMAND = 1148; // The used command is not allowed with this MariaDB version
    const ER_SYNTAX_ERROR = 1149; // You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use
    const ER_DELAYED_CANT_CHANGE_LOCK = 1150; // Delayed insert thread couldn't get requested lock for table %s
    const ER_TOO_MANY_DELAYED_THREADS = 1151; // Too many delayed threads in use
    const ER_ABORTING_CONNECTION = 1152; // Aborted connection %ld to db: '%s' user: '%s' (%s)
    const ER_NET_PACKET_TOO_LARGE = 1153; // Got a packet bigger than 'max_allowed_packet' bytes
    const ER_NET_READ_ERROR_FROM_PIPE = 1154; // Got a read error from the connection pipe
    const ER_NET_FCNTL_ERROR = 1155; // Got an error from fcntl()
    const ER_NET_PACKETS_OUT_OF_ORDER = 1156; // Got packets out of order
    const ER_NET_UNCOMPRESS_ERROR = 1157; // Couldn't uncompress communication packet
    const ER_NET_READ_ERROR = 1158; // Got an error reading communication packets
    const ER_NET_READ_INTERRUPTED = 1159; // Got timeout reading communication packets
    const ER_NET_ERROR_ON_WRITE = 1160; // Got an error writing communication packets
    const ER_NET_WRITE_INTERRUPTED = 1161; // Got timeout writing communication packets
    const ER_TOO_LONG_STRING = 1162; // Result string is longer than 'max_allowed_packet' bytes
    const ER_TABLE_CANT_HANDLE_BLOB = 1163; // The used table type doesn't support BLOB/TEXT columns
    const ER_TABLE_CANT_HANDLE_AUTO_INCREMENT = 1164; // The used table type doesn't support AUTO_INCREMENT columns
    const ER_DELAYED_INSERT_TABLE_LOCKED = 1165; // INSERT DELAYED can't be used with table '%s' because it is locked with LOCK TABLES
    const ER_WRONG_COLUMN_NAME = 1166; // Incorrect column name '%s'
    const ER_WRONG_KEY_COLUMN = 1167; // The used storage engine can't index column '%s'
    const ER_WRONG_MRG_TABLE = 1168; // Unable to open underlying table which is differently defined or of non-MyISAM type or doesn't exist
    const ER_DUP_UNIQUE = 1169; // Can't write, because of unique constraint, to table '%s'
    const ER_BLOB_KEY_WITHOUT_LENGTH = 1170; // BLOB/TEXT column '%s' used in key specification without a key length
    const ER_PRIMARY_CANT_HAVE_NULL = 1171; // All parts of a PRIMARY KEY must be NOT NULL; if you need NULL in a key, use UNIQUE instead
    const ER_TOO_MANY_ROWS = 1172; // Result consisted of more than one row
    const ER_REQUIRES_PRIMARY_KEY = 1173; // This table type requires a primary key
    const ER_NO_RAID_COMPILED = 1174; // This version of MariaDB is not compiled with RAID support
    const ER_UPDATE_WITHOUT_KEY_IN_SAFE_MODE = 1175; // You are using safe update mode and you tried to update a table without a WHERE that uses a KEY column
    const ER_KEY_DOES_NOT_EXITS = 1176; // Key '%s' doesn't exist in table '%s'
    const ER_CHECK_NO_SUCH_TABLE = 1177; // Can't open table
    const ER_CHECK_NOT_IMPLEMENTED = 1178; // The storage engine for the table doesn't support %s
    const ER_CANT_DO_THIS_DURING_AN_TRANSACTION = 1179; // You are not allowed to execute this command in a transaction
    const ER_ERROR_DURING_COMMIT = 1180; // Got error %d during COMMIT
    const ER_ERROR_DURING_ROLLBACK = 1181; // Got error %d during ROLLBACK
    const ER_ERROR_DURING_FLUSH_LOGS = 1182; // Got error %d during FLUSH_LOGS
    const ER_ERROR_DURING_CHECKPOINT = 1183; // Got error %d during CHECKPOINT
    const ER_NEW_ABORTING_CONNECTION = 1184; // Aborted connection %ld to db: '%s' user: '%s' host: '%s' (%s)
    const ER_DUMP_NOT_IMPLEMENTED = 1185; // The storage engine for the table does not support binary table dump
    const ER_FLUSH_MASTER_BINLOG_CLOSED = 1186; // Binlog closed, cannot RESET MASTER
    const ER_INDEX_REBUILD = 1187; // Failed rebuilding the index of dumped table '%s'
    const ER_MASTER = 1188; // Error from master: '%s'
    const ER_MASTER_NET_READ = 1189; // Net error reading from master
    const ER_MASTER_NET_WRITE = 1190; // Net error writing to master
    const ER_FT_MATCHING_KEY_NOT_FOUND = 1191; // Can't find FULLTEXT index matching the column list
    const ER_LOCK_OR_ACTIVE_TRANSACTION = 1192; // Can't execute the given command because you have active locked tables or an active transaction
    const ER_UNKNOWN_SYSTEM_VARIABLE = 1193; // Unknown system variable '%s'
    const ER_CRASHED_ON_USAGE = 1194; // Table '%s' is marked as crashed and should be repaired
    const ER_CRASHED_ON_REPAIR = 1195; // Table '%s' is marked as crashed and last (automatic?) repair failed
    const ER_WARNING_NOT_COMPLETE_ROLLBACK = 1196; // Some non-transactional changed tables couldn't be rolled back
    const ER_TRANS_CACHE_FULL = 1197; // Multi-statement transaction required more than 'max_binlog_cache_size' bytes of storage; increase this mysqld variable and try again
    const ER_SLAVE_MUST_STOP = 1198; // This operation cannot be performed with a running slave; run STOP SLAVE first
    const ER_SLAVE_NOT_RUNNING = 1199; // This operation requires a running slave; configure slave and do START SLAVE
    const ER_BAD_SLAVE = 1200; // The server is not configured as slave; fix in config file or with CHANGE MASTER TO
    const ER_MASTER_INF = 1201; // Could not initialize master info structure; more error messages can be found in the MariaDB error log
    const ER_SLAVE_THREAD = 1202; // Could not create slave thread; check system resources
    const ER_TOO_MANY_USER_CONNECTIONS = 1203; // User %s already has more than 'max_user_connections' active connections
    const ER_SET_CONSTANTS_ONLY = 1204; // You may only use constant expressions with SET
    const ER_LOCK_WAIT_TIMEOUT = 1205; // Lock wait timeout exceeded; try restarting transaction
    const ER_LOCK_TABLE_FULL = 1206; // The total number of locks exceeds the lock table size
    const ER_READ_ONLY_TRANSACTION = 1207; // Update locks cannot be acquired during a READ UNCOMMITTED transaction
    const ER_DROP_DB_WITH_READ_LOCK = 1208; // DROP DATABASE not allowed while thread is holding global read lock
    const ER_CREATE_DB_WITH_READ_LOCK = 1209; // CREATE DATABASE not allowed while thread is holding global read lock
    const ER_WRONG_ARGUMENTS = 1210; // Incorrect arguments to %s
    const ER_NO_PERMISSION_TO_CREATE_USER = 1211; // '%s'@'%s' is not allowed to create new users
    const ER_UNION_TABLES_IN_DIFFERENT_DIR = 1212; // Incorrect table definition; all MERGE tables must be in the same database
    const ER_LOCK_DEADLOCK = 1213; // Deadlock found when trying to get lock; try restarting transaction
    const ER_TABLE_CANT_HANDLE_FT = 1214; // The used table type doesn't support FULLTEXT indexes
    const ER_CANNOT_ADD_FOREIGN = 1215; // Cannot add foreign key constraint
    const ER_NO_REFERENCED_ROW = 1216; // Cannot add or update a child row: a foreign key constraint fails
    const ER_ROW_IS_REFERENCED = 1217; // Cannot delete or update a parent row: a foreign key constraint fails
    const ER_CONNECT_TO_MASTER = 1218; // Error connecting to master: %s
    const ER_QUERY_ON_MASTER = 1219; // Error running query on master: %s
    const ER_ERROR_WHEN_EXECUTING_COMMAND = 1220; // Error when executing command %s: %s
    const ER_WRONG_USAGE = 1221; // Incorrect usage of %s and %s
    const ER_WRONG_NUMBER_OF_COLUMNS_IN_SELECT = 1222; // The used SELECT statements have a different number of columns
    const ER_CANT_UPDATE_WITH_READLOCK = 1223; // Can't execute the query because you have a conflicting read lock
    const ER_MIXING_NOT_ALLOWED = 1224; // Mixing of transactional and non-transactional tables is disabled
    const ER_DUP_ARGUMENT = 1225; // Option '%s' used twice in statement
    const ER_USER_LIMIT_REACHED = 1226; // User '%s' has exceeded the '%s' resource (current value: %ld)
    const ER_SPECIFIC_ACCESS_DENIED_ERROR = 1227; // Access denied; you need (at least one of) the %s privilege(s) for this operation
    const ER_LOCAL_VARIABLE = 1228; // Variable '%s' is a SESSION variable and can't be used with SET GLOBAL
    const ER_GLOBAL_VARIABLE = 1229; // Variable '%s' is a GLOBAL variable and should be set with SET GLOBAL
    const ER_NO_DEFAULT = 1230; // Variable '%s' doesn't have a default value
    const ER_WRONG_VALUE_FOR_VAR = 1231; // Variable '%s' can't be set to the value of '%s'
    const ER_WRONG_TYPE_FOR_VAR = 1232; // Incorrect argument type to variable '%s'
    const ER_VAR_CANT_BE_READ = 1233; // Variable '%s' can only be set, not read
    const ER_CANT_USE_OPTION_HERE = 1234; // Incorrect usage/placement of '%s'
    const ER_NOT_SUPPORTED_YET = 1235; // This version of MariaDB doesn't yet support '%s'
    const ER_MASTER_FATAL_ERROR_READING_BINLOG = 1236; // Got fatal error %d from master when reading data from binary log: '%s'
    const ER_SLAVE_IGNORED_TABLE = 1237; // Slave SQL thread ignored the query because of replicate-*-table rules
    const ER_INCORRECT_GLOBAL_LOCAL_VAR = 1238; // Variable '%s' is a %s variable
    const ER_WRONG_FK_DEF = 1239; // Incorrect foreign key definition for '%s': %s
    const ER_KEY_REF_DO_NOT_MATCH_TABLE_REF = 1240; // Key reference and table reference don't match
    const ER_OPERAND_COLUMNS = 1241; // Operand should contain %d column(s)
    const ER_SUBQUERY_NO_1_ROW = 1242; // Subquery returns more than 1 row
    const ER_UNKNOWN_STMT_HANDLER = 1243; // Unknown prepared statement handler (%.*s) given to %s
    const ER_CORRUPT_HELP_DB = 1244; // Help database is corrupt or does not exist
    const ER_CYCLIC_REFERENCE = 1245; // Cyclic reference on subqueries
    const ER_AUTO_CONVERT = 1246; // Converting column '%s' from %s to %s
    const ER_ILLEGAL_REFERENCE = 1247; // Reference '%s' not supported (%s)
    const ER_DERIVED_MUST_HAVE_ALIAS = 1248; // Every derived table must have its own alias
    const ER_SELECT_REDUCED = 1249; // Select %u was reduced during optimization
    const ER_TABLENAME_NOT_ALLOWED_HERE = 1250; // Table '%s' from one of the SELECTs cannot be used in %s
    const ER_NOT_SUPPORTED_AUTH_MODE = 1251; // Client does not support authentication protocol requested by server; consider upgrading MariaDB client
    const ER_SPATIAL_CANT_HAVE_NULL = 1252; // All parts of a SPATIAL index must be NOT NULL
    const ER_COLLATION_CHARSET_MISMATCH = 1253; // COLLATION '%s' is not valid for CHARACTER SET '%s'
    const ER_SLAVE_WAS_RUNNING = 1254; // Slave is already running
    const ER_SLAVE_WAS_NOT_RUNNING = 1255; // Slave already has been stopped
    const ER_TOO_BIG_FOR_UNCOMPRESS = 1256; // Uncompressed data size too large; the maximum size is %d (probably, length of uncompressed data was corrupted)
    const ER_ZLIB_Z_MEM_ERROR = 1257; // ZLIB: Not enough memory
    const ER_ZLIB_Z_BUF_ERROR = 1258; // ZLIB: Not enough room in the output buffer (probably, length of uncompressed data was corrupted)
    const ER_ZLIB_Z_DATA_ERROR = 1259; // ZLIB: Input data corrupted
    const ER_CUT_VALUE_GROUP_CONCAT = 1260; // Row %u was cut by GROUP_CONCAT()
    const ER_WARN_TOO_FEW_RECORDS = 1261; // Row %ld doesn't contain data for all columns
    const ER_WARN_TOO_MANY_RECORDS = 1262; // Row %ld was truncated; it contained more data than there were input columns
    const ER_WARN_NULL_TO_NOTNULL = 1263; // Column set to default value; NULL supplied to NOT NULL column '%s' at row %ld
    const ER_WARN_DATA_OUT_OF_RANGE = 1264; // Out of range value for column '%s' at row %ld
    const WARN_DATA_TRUNCATED = 1265; // Data truncated for column '%s' at row %ld
    const ER_WARN_USING_OTHER_HANDLER = 1266; // Using storage engine %s for table '%s'
    const ER_CANT_AGGREGATE_2COLLATIONS = 1267; // Illegal mix of collations (%s,%s) and (%s,%s) for operation '%s'
    const ER_DROP_USER = 1268; // Cannot drop one or more of the requested users
    const ER_REVOKE_GRANTS = 1269; // Can't revoke all privileges for one or more of the requested users
    const ER_CANT_AGGREGATE_3COLLATIONS = 1270; // Illegal mix of collations (%s,%s), (%s,%s), (%s,%s) for operation '%s'
    const ER_CANT_AGGREGATE_NCOLLATIONS = 1271; // Illegal mix of collations for operation '%s'
    const ER_VARIABLE_IS_NOT_STRUCT = 1272; // Variable '%s' is not a variable component (can't be used as XXXX.variable_name)
    const ER_UNKNOWN_COLLATION = 1273; // Unknown collation: '%s'
    const ER_SLAVE_IGNORED_SSL_PARAMS = 1274; // SSL parameters in CHANGE MASTER are ignored because this MariaDB slave was compiled without SSL support; they can be used later if MariaDB slave with SSL is started
    const ER_SERVER_IS_IN_SECURE_AUTH_MODE = 1275; // Server is running in --secure-auth mode, but '%s'@'%s' has a password in the old format; please change the password to the new format
    const ER_WARN_FIELD_RESOLVED = 1276; // Field or reference '%s%s%s%s%s' of SELECT #%d was resolved in SELECT #%d
    const ER_BAD_SLAVE_UNTIL_COND = 1277; // Incorrect parameter or combination of parameters for START SLAVE UNTIL
    const ER_MISSING_SKIP_SLAVE = 1278; // It is recommended to use --skip-slave-start when doing step-by-step replication with START SLAVE UNTIL; otherwise, you will get problems if you get an unexpected slave's mysqld restart
    const ER_UNTIL_COND_IGNORED = 1279; // SQL thread is not to be started so UNTIL options are ignored
    const ER_WRONG_NAME_FOR_INDEX = 1280; // Incorrect index name '%s'
    const ER_WRONG_NAME_FOR_CATALOG = 1281; // Incorrect catalog name '%s'
    const ER_WARN_QC_RESIZE = 1282; // Query cache failed to set size %lu; new query cache size is %lu
    const ER_BAD_FT_COLUMN = 1283; // Column '%s' cannot be part of FULLTEXT index
    const ER_UNKNOWN_KEY_CACHE = 1284; // Unknown key cache '%s'
    const ER_WARN_HOSTNAME_WONT_WORK = 1285; // MariaDB is started in --skip-name-resolve mode; you must restart it without this switch for this grant to work
    const ER_UNKNOWN_STORAGE_ENGINE = 1286; // Unknown storage engine '%s'
    const ER_WARN_DEPRECATED_SYNTAX = 1287; // '%s' is deprecated and will be removed in a future release. Please use %s instead
    const ER_NON_UPDATABLE_TABLE = 1288; // The target table %s of the %s is not updatable
    const ER_FEATURE_DISABLED = 1289; // The '%s' feature is disabled; you need MariaDB built with '%s' to have it working
    const ER_OPTION_PREVENTS_STATEMENT = 1290; // The MariaDB server is running with the %s option so it cannot execute this statement
    const ER_DUPLICATED_VALUE_IN_TYPE = 1291; // Column '%s' has duplicated value '%s' in %s
    const ER_TRUNCATED_WRONG_VALUE = 1292; // Truncated incorrect %s value: '%s'
    const ER_TOO_MUCH_AUTO_TIMESTAMP_COLS = 1293; // Incorrect table definition; there can be only one TIMESTAMP column with CURRENT_TIMESTAMP in DEFAULT or ON UPDATE clause
    const ER_INVALID_ON_UPDATE = 1294; // Invalid ON UPDATE clause for '%s' column
    const ER_UNSUPPORTED_PS = 1295; // This command is not supported in the prepared statement protocol yet
    const ER_GET_ERRMSG = 1296; // Got error %d '%s' from %s
    const ER_GET_TEMPORARY_ERRMSG = 1297; // Got temporary error %d '%s' from %s
    const ER_UNKNOWN_TIME_ZONE = 1298; // Unknown or incorrect time zone: '%s'
    const ER_WARN_INVALID_TIMESTAMP = 1299; // Invalid TIMESTAMP value in column '%s' at row %ld
    const ER_INVALID_CHARACTER_STRING = 1300; // Invalid %s character string: '%s'
    const ER_WARN_ALLOWED_PACKET_OVERFLOWED = 1301; // Result of %s() was larger than max_allowed_packet (%ld) - truncated
    const ER_CONFLICTING_DECLARATIONS = 1302; // Conflicting declarations: '%s%s' and '%s%s'
    const ER_SP_NO_RECURSIVE_CREATE = 1303; // Can't create a %s from within another stored routine
    const ER_SP_ALREADY_EXISTS = 1304; // %s %s already exists
    const ER_SP_DOES_NOT_EXIST = 1305; // %s %s does not exist
    const ER_SP_DROP_FAILED = 1306; // Failed to DROP %s %s
    const ER_SP_STORE_FAILED = 1307; // Failed to CREATE %s %s
    const ER_SP_LILABEL_MISMATCH = 1308; // %s with no matching label: %s
    const ER_SP_LABEL_REDEFINE = 1309; // Redefining label %s
    const ER_SP_LABEL_MISMATCH = 1310; // End-label %s without match
    const ER_SP_UNINIT_VAR = 1311; // Referring to uninitialized variable %s
    const ER_SP_BADSELECT = 1312; // PROCEDURE %s can't return a result set in the given context
    const ER_SP_BADRETURN = 1313; // RETURN is only allowed in a FUNCTION
    const ER_SP_BADSTATEMENT = 1314; // %s is not allowed in stored procedures
    const ER_UPDATE_LOG_DEPRECATED_IGNORED = 1315; // The update log is deprecated and replaced by the binary log; SET SQL_LOG_UPDATE has been ignored. This option will be removed in <a href="/kb/en/what-is-mariadb-56/">MariaDB 5.6</a>.
    const ER_UPDATE_LOG_DEPRECATED_TRANSLATED = 1316; // The update log is deprecated and replaced by the binary log; SET SQL_LOG_UPDATE has been translated to SET SQL_LOG_BIN. This option will be removed in <a href="/kb/en/what-is-mariadb-56/">MariaDB 5.6</a>.
    const ER_QUERY_INTERRUPTED = 1317; // Query execution was interrupted
    const ER_SP_WRONG_NO_OF_ARGS = 1318; // Incorrect number of arguments for %s %s; expected %u, got %u
    const ER_SP_COND_MISMATCH = 1319; // Undefined CONDITION: %s
    const ER_SP_NORETURN = 1320; // No RETURN found in FUNCTION %s
    const ER_SP_NORETURNEND = 1321; // FUNCTION %s ended without RETURN
    const ER_SP_BAD_CURSOR_QUERY = 1322; // Cursor statement must be a SELECT
    const ER_SP_BAD_CURSOR_SELECT = 1323; // Cursor SELECT must not have INTO
    const ER_SP_CURSOR_MISMATCH = 1324; // Undefined CURSOR: %s
    const ER_SP_CURSOR_ALREADY_OPEN = 1325; // Cursor is already open
    const ER_SP_CURSOR_NOT_OPEN = 1326; // Cursor is not open
    const ER_SP_UNDECLARED_VAR = 1327; // Undeclared variable: %s
    const ER_SP_WRONG_NO_OF_FETCH_ARGS = 1328; // Incorrect number of FETCH variables
    const ER_SP_FETCH_NO_DATA = 1329; // No data - zero rows fetched, selected, or processed
    const ER_SP_DUP_PARAM = 1330; // Duplicate parameter: %s
    const ER_SP_DUP_VAR = 1331; // Duplicate variable: %s
    const ER_SP_DUP_COND = 1332; // Duplicate condition: %s
    const ER_SP_DUP_CURS = 1333; // Duplicate cursor: %s
    const ER_SP_CANT_ALTER = 1334; // Failed to ALTER %s %s
    const ER_SP_SUBSELECT_NYI = 1335; // Subquery value not supported
    const ER_STMT_NOT_ALLOWED_IN_SF_OR_TRG = 1336; // %s is not allowed in stored function or trigger
    const ER_SP_VARCOND_AFTER_CURSHNDLR = 1337; // Variable or condition declaration after cursor or handler declaration
    const ER_SP_CURSOR_AFTER_HANDLER = 1338; // Cursor declaration after handler declaration
    const ER_SP_CASE_NOT_FOUND = 1339; // Case not found for CASE statement
    const ER_FPARSER_TOO_BIG_FILE = 1340; // Configuration file '%s' is too big
    const ER_FPARSER_BAD_HEADER = 1341; // Malformed file type header in file '%s'
    const ER_FPARSER_EOF_IN_COMMENT = 1342; // Unexpected end of file while parsing comment '%s'
    const ER_FPARSER_ERROR_IN_PARAMETER = 1343; // Error while parsing parameter '%s' (line: '%s')
    const ER_FPARSER_EOF_IN_UNKNOWN_PARAMETER = 1344; // Unexpected end of file while skipping unknown parameter '%s'
    const ER_VIEW_NO_EXPLAIN = 1345; // EXPLAIN/SHOW can not be issued; lacking privileges for underlying table
    const ER_FRM_UNKNOWN_TYPE = 1346; // File '%s' has unknown type '%s' in its header
    const ER_WRONG_OBJECT = 1347; // '%s.%s' is not %s
    const ER_NONUPDATEABLE_COLUMN = 1348; // Column '%s' is not updatable
    const ER_VIEW_SELECT_DERIVED = 1349; // View's SELECT contains a subquery in the FROM clause
    const ER_VIEW_SELECT_CLAUSE = 1350; // View's SELECT contains a '%s' clause
    const ER_VIEW_SELECT_VARIABLE = 1351; // View's SELECT contains a variable or parameter
    const ER_VIEW_SELECT_TMPTABLE = 1352; // View's SELECT refers to a temporary table '%s'
    const ER_VIEW_WRONG_LIST = 1353; // View's SELECT and view's field list have different column counts
    const ER_WARN_VIEW_MERGE = 1354; // View merge algorithm can't be used here for now (assumed undefined algorithm)
    const ER_WARN_VIEW_WITHOUT_KEY = 1355; // View being updated does not have complete key of underlying table in it
    const ER_VIEW_INVALID = 1356; // View '%s.%s' references invalid table(s) or column(s) or function(s) or definer/invoker of view lack rights to use them
    const ER_SP_NO_DROP_SP = 1357; // Can't drop or alter a %s from within another stored routine
    const ER_SP_GOTO_IN_HNDLR = 1358; // GOTO is not allowed in a stored procedure handler
    const ER_TRG_ALREADY_EXISTS = 1359; // Trigger already exists
    const ER_TRG_DOES_NOT_EXIST = 1360; // Trigger does not exist
    const ER_TRG_ON_VIEW_OR_TEMP_TABLE = 1361; // Trigger's '%s' is view or temporary table
    const ER_TRG_CANT_CHANGE_ROW = 1362; // Updating of %s row is not allowed in %strigger
    const ER_TRG_NO_SUCH_ROW_IN_TRG = 1363; // There is no %s row in %s trigger
    const ER_NO_DEFAULT_FOR_FIELD = 1364; // Field '%s' doesn't have a default value
    const ER_DIVISION_BY_ZER = 1365; // Division by 0
    const ER_TRUNCATED_WRONG_VALUE_FOR_FIELD = 1366; // Incorrect %s value: '%s' for column '%s' at row %ld
    const ER_ILLEGAL_VALUE_FOR_TYPE = 1367; // Illegal %s '%s' value found during parsing
    const ER_VIEW_NONUPD_CHECK = 1368; // CHECK OPTION on non-updatable view '%s.%s'
    const ER_VIEW_CHECK_FAILED = 1369; // CHECK OPTION failed '%s.%s'
    const ER_PROCACCESS_DENIED_ERROR = 1370; // %s command denied to user '%s'@'%s' for routine '%s'
    const ER_RELAY_LOG_FAIL = 1371; // Failed purging old relay logs: %s
    const ER_PASSWD_LENGTH = 1372; // Password hash should be a %d-digit hexadecimal number
    const ER_UNKNOWN_TARGET_BINLOG = 1373; // Target log not found in binlog index
    const ER_IO_ERR_LOG_INDEX_READ = 1374; // I/O error reading log index file
    const ER_BINLOG_PURGE_PROHIBITED = 1375; // Server configuration does not permit binlog purge
    const ER_FSEEK_FAIL = 1376; // Failed on fseek()
    const ER_BINLOG_PURGE_FATAL_ERR = 1377; // Fatal error during log purge
    const ER_LOG_IN_USE = 1378; // A purgeable log is in use, will not purge
    const ER_LOG_PURGE_UNKNOWN_ERR = 1379; // Unknown error during log purge
    const ER_RELAY_LOG_INIT = 1380; // Failed initializing relay log position: %s
    const ER_NO_BINARY_LOGGING = 1381; // You are not using binary logging
    const ER_RESERVED_SYNTAX = 1382; // The '%s' syntax is reserved for purposes internal to the MariaDB server
    const ER_WSAS_FAILED = 1383; // WSAStartup Failed
    const ER_DIFF_GROUPS_PROC = 1384; // Can't handle procedures with different groups yet
    const ER_NO_GROUP_FOR_PROC = 1385; // Select must have a group with this procedure
    const ER_ORDER_WITH_PROC = 1386; // Can't use ORDER clause with this procedure
    const ER_LOGGING_PROHIBIT_CHANGING_OF = 1387; // Binary logging and replication forbid changing the global server %s
    const ER_NO_FILE_MAPPING = 1388; // Can't map file: %s, errno: %d
    const ER_WRONG_MAGIC = 1389; // Wrong magic in %s
    const ER_PS_MANY_PARAM = 1390; // Prepared statement contains too many placeholders
    const ER_KEY_PART_0 = 1391; // Key part '%s' length cannot be 0
    const ER_VIEW_CHECKSUM = 1392; // View text checksum failed
    const ER_VIEW_MULTIUPDATE = 1393; // Can not modify more than one base table through a join view '%s.%s'
    const ER_VIEW_NO_INSERT_FIELD_LIST = 1394; // Can not insert into join view '%s.%s' without fields list
    const ER_VIEW_DELETE_MERGE_VIEW = 1395; // Can not delete from join view '%s.%s'
    const ER_CANNOT_USER = 1396; // Operation %s failed for %s
    const ER_XAER_NOTA = 1397; // XAER_NOTA: Unknown XID
    const ER_XAER_INVAL = 1398; // XAER_INVAL: Invalid arguments (or unsupported command)
    const ER_XAER_RMFAIL = 1399; // XAER_RMFAIL: The command cannot be executed when global transaction is in the %s state
    const ER_XAER_OUTSIDE = 1400; // XAER_OUTSIDE: Some work is done outside global transaction
    const ER_XAER_RMERR = 1401; // XAER_RMERR: Fatal error occurred in the transaction branch - check your data for consistency
    const ER_XA_RBROLLBACK = 1402; // XA_RBROLLBACK: Transaction branch was rolled back
    const ER_NONEXISTING_PROC_GRANT = 1403; // There is no such grant defined for user '%s' on host '%s' on routine '%s'
    const ER_PROC_AUTO_GRANT_FAIL = 1404; // Failed to grant EXECUTE and ALTER ROUTINE privileges
    const ER_PROC_AUTO_REVOKE_FAIL = 1405; // Failed to revoke all privileges to dropped routine
    const ER_DATA_TOO_LONG = 1406; // Data too long for column '%s' at row %ld
    const ER_SP_BAD_SQLSTATE = 1407; // Bad SQLSTATE: '%s'
    const ER_STARTUP = 1408; // %s: ready for connections. Version: '%s' socket: '%s' port: %d %s
    const ER_LOAD_FROM_FIXED_SIZE_ROWS_TO_VAR = 1409; // Can't load value from file with fixed size rows to variable
    const ER_CANT_CREATE_USER_WITH_GRANT = 1410; // You are not allowed to create a user with GRANT
    const ER_WRONG_VALUE_FOR_TYPE = 1411; // Incorrect %s value: '%s' for function %s
    const ER_TABLE_DEF_CHANGED = 1412; // Table definition has changed, please retry transaction
    const ER_SP_DUP_HANDLER = 1413; // Duplicate handler declared in the same block
    const ER_SP_NOT_VAR_ARG = 1414; // OUT or INOUT argument %d for routine %s is not a variable or NEW pseudo-variable in BEFORE trigger
    const ER_SP_NO_RETSET = 1415; // Not allowed to return a result set from a %s
    const ER_CANT_CREATE_GEOMETRY_OBJECT = 1416; // Cannot get geometry object from data you send to the GEOMETRY field
    const ER_FAILED_ROUTINE_BREAK_BINLOG = 1417; // A routine failed and has neither NO SQL nor READS SQL DATA in its declaration and binary logging is enabled; if non-transactional tables were updated, the binary log will miss their changes
    const ER_BINLOG_UNSAFE_ROUTINE = 1418; // This function has none of DETERMINISTIC, NO SQL, or READS SQL DATA in its declaration and binary logging is enabled (you *might* want to use the less safe log_bin_trust_function_creators variable)
    const ER_BINLOG_CREATE_ROUTINE_NEED_SUPER = 1419; // You do not have the SUPER privilege and binary logging is enabled (you *might* want to use the less safe log_bin_trust_function_creators variable)
    const ER_EXEC_STMT_WITH_OPEN_CURSOR = 1420; // You can't execute a prepared statement which has an open cursor associated with it. Reset the statement to re-execute it.
    const ER_STMT_HAS_NO_OPEN_CURSOR = 1421; // The statement (%lu) has no open cursor.
    const ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG = 1422; // Explicit or implicit commit is not allowed in stored function or trigger.
    const ER_NO_DEFAULT_FOR_VIEW_FIELD = 1423; // Field of view '%s.%s' underlying table doesn't have a default value
    const ER_SP_NO_RECURSION = 1424; // Recursive stored functions and triggers are not allowed.
    const ER_TOO_BIG_SCALE = 1425; // Too big scale %d specified for column '%s'. Maximum is %lu.
    const ER_TOO_BIG_PRECISION = 1426; // Too big precision %d specified for column '%s'. Maximum is %lu.
    const ER_M_BIGGER_THAN_D = 1427; // For float(M,D, double(M,D or decimal(M,D, M must be &gt;= D (column '%s').
    const ER_WRONG_LOCK_OF_SYSTEM_TABLE = 1428; // You can't combine write-locking of system tables with other tables or lock types
    const ER_CONNECT_TO_FOREIGN_DATA_SOURCE = 1429; // Unable to connect to foreign data source: %s
    const ER_QUERY_ON_FOREIGN_DATA_SOURCE = 1430; // There was a problem processing the query on the foreign data source. Data source error: %s
    const ER_FOREIGN_DATA_SOURCE_DOESNT_EXIST = 1431; // The foreign data source you are trying to reference does not exist. Data source error: %s
    const ER_FOREIGN_DATA_STRING_INVALID_CANT_CREATE = 1432; // Can't create federated table. The data source connection string '%s' is not in the correct format
    const ER_FOREIGN_DATA_STRING_INVALID = 1433; // The data source connection string '%s' is not in the correct format
    const ER_CANT_CREATE_FEDERATED_TABLE = 1434; // Can't create federated table. Foreign data src error: %s
    const ER_TRG_IN_WRONG_SCHEMA = 1435; // Trigger in wrong schema
    const ER_STACK_OVERRUN_NEED_MORE = 1436; // Thread stack overrun: %ld bytes used of a %ld byte stack, and %ld bytes needed. Use 'mysqld --thread_stack=#' to specify a bigger stack.
    const ER_TOO_LONG_BODY = 1437; // Routine body for '%s' is too long
    const ER_WARN_CANT_DROP_DEFAULT_KEYCACHE = 1438; // Cannot drop default keycache
    const ER_TOO_BIG_DISPLAYWIDTH = 1439; // Display width out of range for column '%s' (max = %lu)
    const ER_XAER_DUPID = 1440; // XAER_DUPID: The XID already exists
    const ER_DATETIME_FUNCTION_OVERFLOW = 1441; // Datetime function: %s field overflow
    const ER_CANT_UPDATE_USED_TABLE_IN_SF_OR_TRG = 1442; // Can't update table '%s' in stored function/trigger because it is already used by statement which invoked this stored function/trigger.
    const ER_VIEW_PREVENT_UPDATE = 1443; // The definition of table '%s' prevents operation %s on table '%s'.
    const ER_PS_NO_RECURSION = 1444; // The prepared statement contains a stored routine call that refers to that same statement. It's not allowed to execute a prepared statement in such a recursive manner
    const ER_SP_CANT_SET_AUTOCOMMIT = 1445; // Not allowed to set autocommit from a stored function or trigger
    const ER_MALFORMED_DEFINER = 1446; // Definer is not fully qualified
    const ER_VIEW_FRM_NO_USER = 1447; // View '%s'.'%s' has no definer information (old table format). Current user is used as definer. Please recreate the view!
    const ER_VIEW_OTHER_USER = 1448; // You need the SUPER privilege for creation view with '%s'@'%s' definer
    const ER_NO_SUCH_USER = 1449; // The user specified as a definer ('%s'@'%s') does not exist
    const ER_FORBID_SCHEMA_CHANGE = 1450; // Changing schema from '%s' to '%s' is not allowed.
    const ER_ROW_IS_REFERENCED_2 = 1451; // Cannot delete or update a parent row: a foreign key constraint fails (%s)
    const ER_NO_REFERENCED_ROW_2 = 1452; // Cannot add or update a child row: a foreign key constraint fails (%s)
    const ER_SP_BAD_VAR_SHADOW = 1453; // Variable '%s' must be quoted with `...`, or renamed
    const ER_TRG_NO_DEFINER = 1454; // No definer attribute for trigger '%s'.'%s'. The trigger will be activated under the authorization of the invoker, which may have insufficient privileges. Please recreate the trigger.
    const ER_OLD_FILE_FORMAT = 1455; // '%s' has an old format, you should re-create the '%s' object(s)
    const ER_SP_RECURSION_LIMIT = 1456; // Recursive limit %d (as set by the max_sp_recursion_depth variable) was exceeded for routine %s
    const ER_SP_PROC_TABLE_CORRUPT = 1457; // Failed to load routine %s. The table mysql.proc is missing, corrupt, or contains bad data (internal code %d)
    const ER_SP_WRONG_NAME = 1458; // Incorrect routine name '%s'
    const ER_TABLE_NEEDS_UPGRADE = 1459; // Table upgrade required. Please do "REPAIR TABLE `%s`" or dump/reload to fix it!
    const ER_SP_NO_AGGREGATE = 1460; // AGGREGATE is not supported for stored functions
    const ER_MAX_PREPARED_STMT_COUNT_REACHED = 1461; // Can't create more than max_prepared_stmt_count statements (current value: %lu)
    const ER_VIEW_RECURSIVE = 1462; // `%s`.`%s` contains view recursion
    const ER_NON_GROUPING_FIELD_USED = 1463; // Non-grouping field '%s' is used in %s clause
    const ER_TABLE_CANT_HANDLE_SPKEYS = 1464; // The used table type doesn't support SPATIAL indexes
    const ER_NO_TRIGGERS_ON_SYSTEM_SCHEMA = 1465; // Triggers can not be created on system tables
    const ER_REMOVED_SPACES = 1466; // Leading spaces are removed from name '%s'
    const ER_AUTOINC_READ_FAILED = 1467; // Failed to read auto-increment value from storage engine
    const ER_USERNAME = 1468; // user name
    const ER_HOSTNAME = 1469; // host name
    const ER_WRONG_STRING_LENGTH = 1470; // String '%s' is too long for %s (should be no longer than %d)
    const ER_NON_INSERTABLE_TABLE = 1471; // The target table %s of the %s is not insertable-into
    const ER_ADMIN_WRONG_MRG_TABLE = 1472; // Table '%s' is differently defined or of non-MyISAM type or doesn't exist
    const ER_TOO_HIGH_LEVEL_OF_NESTING_FOR_SELECT = 1473; // Too high level of nesting for select
    const ER_NAME_BECOMES_EMPTY = 1474; // Name '%s' has become ''
    const ER_AMBIGUOUS_FIELD_TERM = 1475; // First character of the FIELDS TERMINATED string is ambiguous; please use non-optional and non-empty FIELDS ENCLOSED BY
    const ER_FOREIGN_SERVER_EXISTS = 1476; // The foreign server, %s, you are trying to create already exists.
    const ER_FOREIGN_SERVER_DOESNT_EXIST = 1477; // The foreign server name you are trying to reference does not exist. Data source error: %s
    const ER_ILLEGAL_HA_CREATE_OPTION = 1478; // Table storage engine '%s' does not support the create option '%s'
    const ER_PARTITION_REQUIRES_VALUES_ERROR = 1479; // Syntax error: %s PARTITIONING requires definition of VALUES %s for each partition
    const ER_PARTITION_WRONG_VALUES_ERROR = 1480; // Only %s PARTITIONING can use VALUES %s in partition definition
    const ER_PARTITION_MAXVALUE_ERROR = 1481; // MAXVALUE can only be used in last partition definition
    const ER_PARTITION_SUBPARTITION_ERROR = 1482; // Subpartitions can only be hash partitions and by key
    const ER_PARTITION_SUBPART_MIX_ERROR = 1483; // Must define subpartitions on all partitions if on one partition
    const ER_PARTITION_WRONG_NO_PART_ERROR = 1484; // Wrong number of partitions defined, mismatch with previous setting
    const ER_PARTITION_WRONG_NO_SUBPART_ERROR = 1485; // Wrong number of subpartitions defined, mismatch with previous setting
    const ER_CONST_EXPR_IN_PARTITION_FUNC_ERROR = 1486; // Constant/Random expression in (sub)partitioning function is not allowed
    const ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR = 1486; // Constant, random or timezone-dependent expressions in (sub)partitioning function are not allowed
    const ER_NO_CONST_EXPR_IN_RANGE_OR_LIST_ERROR = 1487; // Expression in RANGE/LIST VALUES must be constant
    const ER_FIELD_NOT_FOUND_PART_ERROR = 1488; // Field in list of fields for partition function not found in table
    const ER_LIST_OF_FIELDS_ONLY_IN_HASH_ERROR = 1489; // List of fields is only allowed in KEY partitions
    const ER_INCONSISTENT_PARTITION_INFO_ERROR = 1490; // The partition info in the frm file is not consistent with what can be written into the frm file
    const ER_PARTITION_FUNC_NOT_ALLOWED_ERROR = 1491; // The %s function returns the wrong type
    const ER_PARTITIONS_MUST_BE_DEFINED_ERROR = 1492; // For %s partitions each partition must be defined
    const ER_RANGE_NOT_INCREASING_ERROR = 1493; // VALUES LESS THAN value must be strictly increasing for each partition
    const ER_INCONSISTENT_TYPE_OF_FUNCTIONS_ERROR = 1494; // VALUES value must be of same type as partition function
    const ER_MULTIPLE_DEF_CONST_IN_LIST_PART_ERROR = 1495; // Multiple definition of same constant in list partitioning
    const ER_PARTITION_ENTRY_ERROR = 1496; // Partitioning can not be used stand-alone in query
    const ER_MIX_HANDLER_ERROR = 1497; // The mix of handlers in the partitions is not allowed in this version of MariaDB
    const ER_PARTITION_NOT_DEFINED_ERROR = 1498; // For the partitioned engine it is necessary to define all %s
    const ER_TOO_MANY_PARTITIONS_ERROR = 1499; // Too many partitions (including subpartitions) were defined
    const ER_SUBPARTITION_ERROR = 1500; // It is only possible to mix RANGE/LIST partitioning with HASH/KEY partitioning for subpartitioning
    const ER_CANT_CREATE_HANDLER_FILE = 1501; // Failed to create specific handler file
    const ER_BLOB_FIELD_IN_PART_FUNC_ERROR = 1502; // A BLOB field is not allowed in partition function
    const ER_UNIQUE_KEY_NEED_ALL_FIELDS_IN_PF = 1503; // A %s must include all columns in the table's partitioning function
    const ER_NO_PARTS_ERROR = 1504; // Number of %s = 0 is not an allowed value
    const ER_PARTITION_MGMT_ON_NONPARTITIONED = 1505; // Partition management on a not partitioned table is not possible
    const ER_FOREIGN_KEY_ON_PARTITIONED = 1506; // Foreign key clause is not yet supported in conjunction with partitioning
    const ER_DROP_PARTITION_NON_EXISTENT = 1507; // Error in list of partitions to %s
    const ER_DROP_LAST_PARTITION = 1508; // Cannot remove all partitions, use DROP TABLE instead
    const ER_COALESCE_ONLY_ON_HASH_PARTITION = 1509; // COALESCE PARTITION can only be used on HASH/KEY partitions
    const ER_REORG_HASH_ONLY_ON_SAME_N = 1510; // REORGANIZE PARTITION can only be used to reorganize partitions not to change their numbers
    const ER_REORG_NO_PARAM_ERROR = 1511; // REORGANIZE PARTITION without parameters can only be used on auto-partitioned tables using HASH PARTITIONs
    const ER_ONLY_ON_RANGE_LIST_PARTITION = 1512; // %s PARTITION can only be used on RANGE/LIST partitions
    const ER_ADD_PARTITION_SUBPART_ERROR = 1513; // Trying to Add partition(s) with wrong number of subpartitions
    const ER_ADD_PARTITION_NO_NEW_PARTITION = 1514; // At least one partition must be added
    const ER_COALESCE_PARTITION_NO_PARTITION = 1515; // At least one partition must be coalesced
    const ER_REORG_PARTITION_NOT_EXIST = 1516; // More partitions to reorganize than there are partitions
    const ER_SAME_NAME_PARTITION = 1517; // Duplicate partition name %s
    const ER_NO_BINLOG_ERROR = 1518; // It is not allowed to shut off binlog on this command
    const ER_CONSECUTIVE_REORG_PARTITIONS = 1519; // When reorganizing a set of partitions they must be in consecutive order
    const ER_REORG_OUTSIDE_RANGE = 1520; // Reorganize of range partitions cannot change total ranges except for last partition where it can extend the range
    const ER_PARTITION_FUNCTION_FAILURE = 1521; // Partition function not supported in this version for this handler
    const ER_PART_STATE_ERROR = 1522; // Partition state cannot be defined from CREATE/ALTER TABLE
    const ER_LIMITED_PART_RANGE = 1523; // The %s handler only supports 32 bit integers in VALUES
    const ER_PLUGIN_IS_NOT_LOADED = 1524; // Plugin '%s' is not loaded
    const ER_WRONG_VALUE = 1525; // Incorrect %s value: '%s'
    const ER_NO_PARTITION_FOR_GIVEN_VALUE = 1526; // Table has no partition for value %s
    const ER_FILEGROUP_OPTION_ONLY_ONCE = 1527; // It is not allowed to specify %s more than once
    const ER_CREATE_FILEGROUP_FAILED = 1528; // Failed to create %s
    const ER_DROP_FILEGROUP_FAILED = 1529; // Failed to drop %s
    const ER_TABLESPACE_AUTO_EXTEND_ERROR = 1530; // The handler doesn't support autoextend of tablespaces
    const ER_WRONG_SIZE_NUMBER = 1531; // A size parameter was incorrectly specified, either number or on the form 10M
    const ER_SIZE_OVERFLOW_ERROR = 1532; // The size number was correct but we don't allow the digit part to be more than 2 billion
    const ER_ALTER_FILEGROUP_FAILED = 1533; // Failed to alter: %s
    const ER_BINLOG_ROW_LOGGING_FAILED = 1534; // Writing one row to the row-based binary log failed
    const ER_BINLOG_ROW_WRONG_TABLE_DEF = 1535; // Table definition on master and slave does not match: %s
    const ER_BINLOG_ROW_RBR_TO_SBR = 1536; // Slave running with --log-slave-updates must use row-based binary logging to be able to replicate row-based binary log events
    const ER_EVENT_ALREADY_EXISTS = 1537; // Event '%s' already exists
    const ER_EVENT_STORE_FAILED = 1538; // Failed to store event %s. Error code %d from storage engine.
    const ER_EVENT_DOES_NOT_EXIST = 1539; // Unknown event '%s'
    const ER_EVENT_CANT_ALTER = 1540; // Failed to alter event '%s'
    const ER_EVENT_DROP_FAILED = 1541; // Failed to drop %s
    const ER_EVENT_INTERVAL_NOT_POSITIVE_OR_TOO_BIG = 1542; // INTERVAL is either not positive or too big
    const ER_EVENT_ENDS_BEFORE_STARTS = 1543; // ENDS is either invalid or before STARTS
    const ER_EVENT_EXEC_TIME_IN_THE_PAST = 1544; // Event execution time is in the past. Event has been disabled
    const ER_EVENT_OPEN_TABLE_FAILED = 1545; // Failed to open <a href="/kb/en/mysqlevent-table/">mysql.event</a>
    const ER_EVENT_NEITHER_M_EXPR_NOR_M_AT = 1546; // No datetime expression provided
    const ER_COL_COUNT_DOESNT_MATCH_CORRUPTED = 1547; // Column count of mysql.%s is wrong. Expected %d, found %d. The table is probably corrupted
    const ER_CANNOT_LOAD_FROM_TABLE = 1548; // Cannot load from mysql.%s. The table is probably corrupted
    const ER_EVENT_CANNOT_DELETE = 1549; // Failed to delete the event from <a href="/kb/en/mysqlevent-table/">mysql.event</a>
    const ER_EVENT_COMPILE_ERROR = 1550; // Error during compilation of event's body
    const ER_EVENT_SAME_NAME = 1551; // Same old and new event name
    const ER_EVENT_DATA_TOO_LONG = 1552; // Data for column '%s' too long
    const ER_DROP_INDEX_FK = 1553; // Cannot drop index '%s': needed in a foreign key constraint
    const ER_WARN_DEPRECATED_SYNTAX_WITH_VER = 1554; // The syntax '%s' is deprecated and will be removed in MariaDB %s. Please use %s instead
    const ER_CANT_WRITE_LOCK_LOG_TABLE = 1555; // You can't write-lock a log table. Only read access is possible
    const ER_CANT_LOCK_LOG_TABLE = 1556; // You can't use locks with log tables.
    const ER_FOREIGN_DUPLICATE_KEY = 1557; // Upholding foreign key constraints for table '%s', entry '%s', key %d would lead to a duplicate entry
    const ER_COL_COUNT_DOESNT_MATCH_PLEASE_UPDATE = 1558; // Column count of mysql.%s is wrong. Expected %d, found %d. Created with MariaDB %d, now running %d. Please use mysql_upgrade to fix this error.
    const ER_TEMP_TABLE_PREVENTS_SWITCH_OUT_OF_RBR = 1559; // Cannot switch out of the row-based binary log format when the session has open temporary tables
    const ER_STORED_FUNCTION_PREVENTS_SWITCH_BINLOG_FORMAT = 1560; // Cannot change the binary logging format inside a stored function or trigger
    const ER_NDB_CANT_SWITCH_BINLOG_FORMAT = 1561; // The NDB cluster engine does not support changing the binlog format on the fly yet
    const ER_PARTITION_NO_TEMPORARY = 1562; // Cannot create temporary table with partitions
    const ER_PARTITION_CONST_DOMAIN_ERROR = 1563; // Partition constant is out of partition function domain
    const ER_PARTITION_FUNCTION_IS_NOT_ALLOWED = 1564; // This partition function is not allowed
    const ER_DDL_LOG_ERROR = 1565; // Error in DDL log
    const ER_NULL_IN_VALUES_LESS_THAN = 1566; // Not allowed to use NULL value in VALUES LESS THAN
    const ER_WRONG_PARTITION_NAME = 1567; // Incorrect partition name
    const ER_CANT_CHANGE_TX_ISOLATION = 1568; // Transaction isolation level can't be changed while a transaction is in progress
    const ER_DUP_ENTRY_AUTOINCREMENT_CASE = 1569; // ALTER TABLE causes auto_increment resequencing, resulting in duplicate entry '%s' for key '%s'
    const ER_EVENT_MODIFY_QUEUE_ERROR = 1570; // Internal scheduler error %d
    const ER_EVENT_SET_VAR_ERROR = 1571; // Error during starting/stopping of the scheduler. Error code %u
    const ER_PARTITION_MERGE_ERROR = 1572; // Engine cannot be used in partitioned tables
    const ER_CANT_ACTIVATE_LOG = 1573; // Cannot activate '%s' log
    const ER_RBR_NOT_AVAILABLE = 1574; // The server was not built with row-based replication
    const ER_BASE64_DECODE_ERROR = 1575; // Decoding of base64 string failed
    const ER_EVENT_RECURSION_FORBIDDEN = 1576; // Recursion of EVENT DDL statements is forbidden when body is present
    const ER_EVENTS_DB_ERROR = 1577; // Cannot proceed because system tables used by Event Scheduler were found damaged at server start
    const ER_ONLY_INTEGERS_ALLOWED = 1578; // Only integers allowed as number here
    const ER_UNSUPORTED_LOG_ENGINE = 1579; // This storage engine cannot be used for log tables"
    const ER_BAD_LOG_STATEMENT = 1580; // You cannot '%s' a log table if logging is enabled
    const ER_CANT_RENAME_LOG_TABLE = 1581; // Cannot rename '%s'. When logging enabled, rename to/from log table must rename two tables: the log table to an archive table and another table back to '%s'
    const ER_WRONG_PARAMCOUNT_TO_NATIVE_FCT = 1582; // Incorrect parameter count in the call to native function '%s'
    const ER_WRONG_PARAMETERS_TO_NATIVE_FCT = 1583; // Incorrect parameters in the call to native function '%s'
    const ER_WRONG_PARAMETERS_TO_STORED_FCT = 1584; // Incorrect parameters in the call to stored function '%s'
    const ER_NATIVE_FCT_NAME_COLLISION = 1585; // This function '%s' has the same name as a native function
    const ER_DUP_ENTRY_WITH_KEY_NAME = 1586; // Duplicate entry '%s' for key '%s'
    const ER_BINLOG_PURGE_EMFILE = 1587; // Too many files opened, please execute the command again
    const ER_EVENT_CANNOT_CREATE_IN_THE_PAST = 1588; // Event execution time is in the past and ON COMPLETION NOT PRESERVE is set. The event was dropped immediately after creation.
    const ER_EVENT_CANNOT_ALTER_IN_THE_PAST = 1589; // Event execution time is in the past and ON COMPLETION NOT PRESERVE is set. The event was dropped immediately after creation.
    const ER_SLAVE_INCIDENT = 1590; // The incident %s occured on the master. Message: %s
    const ER_NO_PARTITION_FOR_GIVEN_VALUE_SILENT = 1591; // Table has no partition for some existing values
    const ER_BINLOG_UNSAFE_STATEMENT = 1592; // Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT. %s
    const ER_SLAVE_FATAL_ERROR = 1593; // Fatal error: %s
    const ER_SLAVE_RELAY_LOG_READ_FAILURE = 1594; // Relay log read failure: %s
    const ER_SLAVE_RELAY_LOG_WRITE_FAILURE = 1595; // Relay log write failure: %s
    const ER_SLAVE_CREATE_EVENT_FAILURE = 1596; // Failed to create %s
    const ER_SLAVE_MASTER_COM_FAILURE = 1597; // Master command %s failed: %s
    const ER_BINLOG_LOGGING_IMPOSSIBLE = 1598; // Binary logging not possible. Message: %s
    const ER_VIEW_NO_CREATION_CTX = 1599; // View `%s`.`%s` has no creation context
    const ER_VIEW_INVALID_CREATION_CTX = 1600; // Creation context of view `%s`.`%s' is invalid
    const ER_SR_INVALID_CREATION_CTX = 1601; // Creation context of stored routine `%s`.`%s` is invalid
    const ER_TRG_CORRUPTED_FILE = 1602; // Corrupted TRG file for table `%s`.`%s`
    const ER_TRG_NO_CREATION_CTX = 1603; // Triggers for table `%s`.`%s` have no creation context
    const ER_TRG_INVALID_CREATION_CTX = 1604; // Trigger creation context of table `%s`.`%s` is invalid
    const ER_EVENT_INVALID_CREATION_CTX = 1605; // Creation context of event `%s`.`%s` is invalid
    const ER_TRG_CANT_OPEN_TABLE = 1606; // Cannot open table for trigger `%s`.`%s`
    const ER_CANT_CREATE_SROUTINE = 1607; // Cannot create stored routine `%s`. Check warnings
    const ER_NO_FORMAT_DESCRIPTION_EVENT_BEFORE_BINLOG_STATEMENT = 1609; // The BINLOG statement of type `%s` was not preceded by a format description BINLOG statement.
    const ER_SLAVE_CORRUPT_EVENT = 1610; // Corrupted replication event was detected
    const ER_LOAD_DATA_INVALID_COLUMN = 1611; // Invalid column reference (%s) in LOAD DATA
    const ER_LOG_PURGE_NO_FILE = 1612; // Being purged log %s was not found
    const ER_XA_RBTIMEOUT = 1613; // XA_RBTIMEOUT: Transaction branch was rolled back: took too long
    const ER_XA_RBDEADLOCK = 1614; // XA_RBDEADLOCK: Transaction branch was rolled back: deadlock was detected
    const ER_NEED_REPREPARE = 1615; // Prepared statement needs to be re-prepared
    const ER_DELAYED_NOT_SUPPORTED = 1616; // DELAYED option not supported for table '%s'
    const WARN_NO_MASTER_INF = 1617; // The master info structure does not exist
    const WARN_OPTION_IGNORED = 1618; // &lt;%s&gt; option ignored
    const WARN_PLUGIN_DELETE_BUILTIN = 1619; // Built-in plugins cannot be deleted
    const WARN_PLUGIN_BUSY = 1620; // Plugin is busy and will be uninstalled on shutdown
    const ER_VARIABLE_IS_READONLY = 1621; // %s variable '%s' is read-only. Use SET %s to assign the value
    const ER_WARN_ENGINE_TRANSACTION_ROLLBACK = 1622; // Storage engine %s does not support rollback for this statement. Transaction rolled back and must be restarted
    const ER_SLAVE_HEARTBEAT_FAILURE = 1623; // Unexpected master's heartbeat data: %s
    const ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE = 1624; // The requested value for the heartbeat period is either negative or exceeds the maximum allowed (%s seconds).
    const ER_NDB_REPLICATION_SCHEMA_ERROR = 1625; // Bad schema for mysql.ndb_replication table. Message: %s
    const ER_CONFLICT_FN_PARSE_ERROR = 1626; // Error in parsing conflict function. Message: %s
    const ER_EXCEPTIONS_WRITE_ERROR = 1627; // Write to exceptions table failed. Message: %s"
    const ER_TOO_LONG_TABLE_COMMENT = 1628; // Comment for table '%s' is too long (max = %lu)
    const ER_TOO_LONG_FIELD_COMMENT = 1629; // Comment for field '%s' is too long (max = %lu)
    const ER_FUNC_INEXISTENT_NAME_COLLISION = 1630; // FUNCTION %s does not exist. Check the 'Function Name Parsing and Resolution' section in the Reference Manual
    const ER_DATABASE_NAME = 1631; // Database
    const ER_TABLE_NAME = 1632; // Table
    const ER_PARTITION_NAME = 1633; // Partition
    const ER_SUBPARTITION_NAME = 1634; // Subpartition
    const ER_TEMPORARY_NAME = 1635; // Temporary
    const ER_RENAMED_NAME = 1636; // Renamed
    const ER_TOO_MANY_CONCURRENT_TRXS = 1637; // Too many active concurrent transactions
    const WARN_NON_ASCII_SEPARATOR_NOT_IMPLEMENTED = 1638; // Non-ASCII separator arguments are not fully supported
    const ER_DEBUG_SYNC_TIMEOUT = 1639; // debug sync point wait timed out
    const ER_DEBUG_SYNC_HIT_LIMIT = 1640; // debug sync point hit limit reached
    const ER_DUP_SIGNAL_SET = 1641; // Duplicate condition information item '%s'
    const ER_SIGNAL_WARN = 1642; // Unhandled user-defined warning condition
    const ER_SIGNAL_NOT_FOUND = 1643; // Unhandled user-defined not found condition
    const ER_SIGNAL_EXCEPTION = 1644; // Unhandled user-defined exception condition
    const ER_RESIGNAL_WITHOUT_ACTIVE_HANDLER = 1645; // RESIGNAL when handler not active
    const ER_SIGNAL_BAD_CONDITION_TYPE = 1646; // SIGNAL/RESIGNAL can only use a CONDITION defined with SQLSTATE
    const WARN_COND_ITEM_TRUNCATED = 1647; // Data truncated for condition item '%s'
    const ER_COND_ITEM_TOO_LONG = 1648; // Data too long for condition item '%s'
    const ER_UNKNOWN_LOCALE = 1649; // Unknown locale: '%s'
    const ER_SLAVE_IGNORE_SERVER_IDS = 1650; // The requested server id %d clashes with the slave startup option --replicate-same-server-id
    const ER_QUERY_CACHE_DISABLED = 1651; // Query cache is disabled; restart the server with query_cache_type=1 to enable it
    const ER_SAME_NAME_PARTITION_FIELD = 1652; // Duplicate partition field name '%s'
    const ER_PARTITION_COLUMN_LIST_ERROR = 1653; // Inconsistency in usage of column lists for partitioning
    const ER_WRONG_TYPE_COLUMN_VALUE_ERROR = 1654; // Partition column values of incorrect type
    const ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR = 1655; // Too many fields in '%s'
    const ER_MAXVALUE_IN_VALUES_IN = 1656; // Cannot use MAXVALUE as value in VALUES IN
    const ER_TOO_MANY_VALUES_ERROR = 1657; // Cannot have more than one value for this type of %s partitioning
    const ER_ROW_SINGLE_PARTITION_FIELD_ERROR = 1658; // Row expressions in VALUES IN only allowed for multi-field column partitioning
    const ER_FIELD_TYPE_NOT_ALLOWED_AS_PARTITION_FIELD = 1659; // Field '%s' is of a not allowed type for this type of partitioning
    const ER_PARTITION_FIELDS_TOO_LONG = 1660; // The total length of the partitioning fields is too large
    const ER_BINLOG_ROW_ENGINE_AND_STMT_ENGINE = 1661; // Cannot execute statement: impossible to write to binary log since both row-incapable engines and statement-incapable engines are involved.
    const ER_BINLOG_ROW_MODE_AND_STMT_ENGINE = 1662; // Cannot execute statement: impossible to write to binary log since BINLOG_FORMAT = ROW and at least one table uses a storage engine limited to statement-based logging.
    const ER_BINLOG_UNSAFE_AND_STMT_ENGINE = 1663; // Cannot execute statement: impossible to write to binary log since statement is unsafe, storage engine is limited to statement-based logging, and BINLOG_FORMAT = MIXED. %s
    const ER_BINLOG_ROW_INJECTION_AND_STMT_ENGINE = 1664; // Cannot execute statement: impossible to write to binary log since statement is in row format and at least one table uses a storage engine limited to statement-based logging.
    const ER_BINLOG_STMT_MODE_AND_ROW_ENGINE = 1665; // Cannot execute statement: impossible to write to binary log since BINLOG_FORMAT = STATEMENT and at least one table uses a storage engine limited to row-based logging.%s
    const ER_BINLOG_ROW_INJECTION_AND_STMT_MODE = 1666; // Cannot execute statement: impossible to write to binary log since statement is in row format and BINLOG_FORMAT = STATEMENT.
    const ER_BINLOG_MULTIPLE_ENGINES_AND_SELF_LOGGING_ENGINE = 1667; // Cannot execute statement: impossible to write to binary log since more than one engine is involved and at least one engine is self-logging.
    const ER_BINLOG_UNSAFE_LIMIT = 1668; // The statement is unsafe because it uses a LIMIT clause. This is unsafe because the set of rows included cannot be predicted.
    const ER_BINLOG_UNSAFE_INSERT_DELAYED = 1669; // The statement is unsafe because it uses INSERT DELAYED. This is unsafe because the times when rows are inserted cannot be predicted.
    const ER_BINLOG_UNSAFE_SYSTEM_TABLE = 1670; // The statement is unsafe because it uses the general log, slow query log, or performance_schema table(s). This is unsafe because system tables may differ on slaves.
    const ER_BINLOG_UNSAFE_AUTOINC_COLUMNS = 1671; // Statement is unsafe because it invokes a trigger or a stored function that inserts into an AUTO_INCREMENT column. Inserted values cannot be logged correctly.
    const ER_BINLOG_UNSAFE_UDF = 1672; // Statement is unsafe because it uses a UDF which may not return the same value on the slave.
    const ER_BINLOG_UNSAFE_SYSTEM_VARIABLE = 1673; // Statement is unsafe because it uses a system variable that may have a different value on the slave.
    const ER_BINLOG_UNSAFE_SYSTEM_FUNCTION = 1674; // Statement is unsafe because it uses a system function that may return a different value on the slave.
    const ER_BINLOG_UNSAFE_NONTRANS_AFTER_TRANS = 1675; // Statement is unsafe because it accesses a non-transactional table after accessing a transactional table within the same transaction.
    const ER_MESSAGE_AND_STATEMENT = 1676; // %s Statement: %s
    const ER_SLAVE_CONVERSION_FAILED = 1677; // Column %d of table '%s.%s' cannot be converted from type '%s' to type '%s'
    const ER_SLAVE_CANT_CREATE_CONVERSION = 1678; // Can't create conversion table for table '%s.%s'
    const ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_BINLOG_FORMAT = 1679; // Cannot modify @@session.binlog_format inside a transaction
    const ER_PATH_LENGTH = 1680; // The path specified for %s is too long.
    const ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT = 1681; // '%s' is deprecated and will be removed in a future release.
    const ER_WRONG_NATIVE_TABLE_STRUCTURE = 1682; // Native table '%s'.'%s' has the wrong structure
    const ER_WRONG_PERFSCHEMA_USAGE = 1683; // Invalid performance_schema usage.
    const ER_WARN_I_S_SKIPPED_TABLE = 1684; // Table '%s'.'%s' was skipped since its definition is being modified by concurrent DDL statement
    const ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_BINLOG_DIRECT = 1685; // Cannot modify @@session.binlog_direct_non_transactional_updates inside a transaction
    const ER_STORED_FUNCTION_PREVENTS_SWITCH_BINLOG_DIRECT = 1686; // Cannot change the binlog direct flag inside a stored function or trigger
    const ER_SPATIAL_MUST_HAVE_GEOM_COL = 1687; // A SPATIAL index may only contain a geometrical type column
    const ER_TOO_LONG_INDEX_COMMENT = 1688; // Comment for index '%s' is too long (max = %lu)
    const ER_LOCK_ABORTED = 1689; // Wait on a lock was aborted due to a pending exclusive lock
    const ER_DATA_OUT_OF_RANGE = 1690; // %s value is out of range in '%s'
    const ER_WRONG_SPVAR_TYPE_IN_LIMIT = 1691; // A variable of a non-integer based type in LIMIT clause
    const ER_BINLOG_UNSAFE_MULTIPLE_ENGINES_AND_SELF_LOGGING_ENGINE = 1692; // Mixing self-logging and non-self-logging engines in a statement is unsafe.
    const ER_BINLOG_UNSAFE_MIXED_STATEMENT = 1693; // Statement accesses nontransactional table as well as transactional or temporary table, and writes to any of them.
    const ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_SQL_LOG_BIN = 1694; // Cannot modify @@session.sql_log_bin inside a transaction
    const ER_STORED_FUNCTION_PREVENTS_SWITCH_SQL_LOG_BIN = 1695; // Cannot change the sql_log_bin inside a stored function or trigger
    const ER_FAILED_READ_FROM_PAR_FILE = 1696; // Failed to read from the .par file
    const ER_VALUES_IS_NOT_INT_TYPE_ERROR = 1697; // VALUES value for partition '%s' must have type INT
    const ER_ACCESS_DENIED_NO_PASSWORD_ERROR = 1698; // Access denied for user '%s'@'%s'
    const ER_SET_PASSWORD_AUTH_PLUGIN = 1699; // SET PASSWORD has no significance for users authenticating via plugins
    const ER_GRANT_PLUGIN_USER_EXISTS = 1700; // GRANT with IDENTIFIED WITH is illegal because the user %-.*s already exists
    const ER_TRUNCATE_ILLEGAL_FK = 1701; // Cannot truncate a table referenced in a foreign key constraint (%s)
    const ER_PLUGIN_IS_PERMANENT = 1702; // Plugin '%s' is force_plus_permanent and can not be unloaded
    const ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN = 1703; // The requested value for the heartbeat period is less than 1 millisecond. The value is reset to 0, meaning that heartbeating will effectively be disabled.
    const ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX = 1704; // The requested value for the heartbeat period exceeds the value of <a href="/kb/en/replication-and-binary-log-server-system-variables/#slave_net_timeout">slave_net_timeout</a> seconds. A sensible value for the period should be less than the timeout.
    const ER_STMT_CACHE_FULL = 1705; // Multi-row statements required more than 'max_binlog_stmt_cache_size' bytes of storage; increase this mysqld variable and try again
    const ER_MULTI_UPDATE_KEY_CONFLICT = 1706; // Primary key/partition key update is not allowed since the table is updated both as '%s' and '%s'.
    const ER_TABLE_NEEDS_REBUILD = 1707; // Table rebuild required. Please do "ALTER TABLE `%s` FORCE" or dump/reload to fix it!
    const WARN_OPTION_BELOW_LIMIT = 1708; // The value of '%s' should be no less than the value of '%s'
    const ER_INDEX_COLUMN_TOO_LONG = 1709; // Index column size too large. The maximum column size is %lu bytes.
    const ER_ERROR_IN_TRIGGER_BODY = 1710; // Trigger '%s' has an error in its body: '%s'
    const ER_ERROR_IN_UNKNOWN_TRIGGER_BODY = 1711; // Unknown trigger has an error in its body: '%s'
    const ER_INDEX_CORRUPT = 1712; // Index %s is corrupted
    const ER_UNDO_RECORD_TOO_BIG = 1713; // <a href="/kb/en/undo-log/">Undo log</a> record is too big.
    const ER_BINLOG_UNSAFE_INSERT_IGNORE_SELECT = 1714; // INSERT IGNORE... SELECT is unsafe because the order in which rows are retrieved by the SELECT determines which (if any) rows are ignored. This order cannot be predicted and may differ on master and the slave.
    const ER_BINLOG_UNSAFE_INSERT_SELECT_UPDATE = 1715; // INSERT... SELECT... ON DUPLICATE KEY UPDATE is unsafe because the order in which rows are retrieved by the SELECT determines which (if any) rows are updated. This order cannot be predicted and may differ on master and the slave.
    const ER_BINLOG_UNSAFE_REPLACE_SELECT = 1716; // REPLACE... SELECT is unsafe because the order in which rows are retrieved by the SELECT determines which (if any) rows are replaced. This order cannot be predicted and may differ on master and the slave.
    const ER_BINLOG_UNSAFE_CREATE_IGNORE_SELECT = 1717; // CREATE... IGNORE SELECT is unsafe because the order in which rows are retrieved by the SELECT determines which (if any) rows are ignored. This order cannot be predicted and may differ on master and the slave.
    const ER_BINLOG_UNSAFE_CREATE_REPLACE_SELECT = 1718; // CREATE... REPLACE SELECT is unsafe because the order in which rows are retrieved by the SELECT determines which (if any) rows are replaced. This order cannot be predicted and may differ on master and the slave.
    const ER_BINLOG_UNSAFE_UPDATE_IGNORE = 1719; // UPDATE IGNORE is unsafe because the order in which rows are updated determines which (if any) rows are ignored. This order cannot be predicted and may differ on master and the slave.
    const ER_PLUGIN_NO_UNINSTALL = 1720; // Plugin '%s' is marked as not dynamically uninstallable. You have to stop the server to uninstall it.
    const ER_PLUGIN_NO_INSTALL = 1721; // Plugin '%s' is marked as not dynamically installable. You have to stop the server to install it.
    const ER_BINLOG_UNSAFE_WRITE_AUTOINC_SELECT = 1722; // Statements writing to a table with an auto-increment column after selecting from another table are unsafe because the order in which rows are retrieved determines what (if any) rows will be written. This order cannot be predicted and may differ on master and the slave.
    const ER_BINLOG_UNSAFE_CREATE_SELECT_AUTOINC = 1723; // CREATE TABLE... SELECT... on a table with an auto-increment column is unsafe because the order in which rows are retrieved by the SELECT determines which (if any) rows are inserted. This order cannot be predicted and may differ on master and the slave.
    const ER_BINLOG_UNSAFE_INSERT_TWO_KEYS = 1724; // INSERT... ON DUPLICATE KEY UPDATE on a table with more than one UNIQUE KEY is unsafe
    const ER_TABLE_IN_FK_CHECK = 1725; // Table is being used in foreign key check.
    const ER_UNSUPPORTED_ENGINE = 1726; // Storage engine '%s' does not support system tables. [%s.%s]
    const ER_BINLOG_UNSAFE_AUTOINC_NOT_FIRST = 1727; // INSERT into autoincrement field which is not the first part in the composed primary key is unsafe.
    const ER_CANNOT_LOAD_FROM_TABLE_V2 = 1728; // Cannot load from %s.%s. The table is probably corrupted
    const ER_MASTER_DELAY_VALUE_OUT_OF_RANGE = 1729; // The requested value %s for the master delay exceeds the maximum %u
    const ER_ONLY_FD_AND_RBR_EVENTS_ALLOWED_IN_BINLOG_STATEMENT = 1730; // Only Format_description_log_event and row events are allowed in BINLOG statements (but %s was provided
    const ER_PARTITION_EXCHANGE_DIFFERENT_OPTION = 1731; // Non matching attribute '%s' between partition and table
    const ER_PARTITION_EXCHANGE_PART_TABLE = 1732; // Table to exchange with partition is partitioned: '%s'
    const ER_PARTITION_EXCHANGE_TEMP_TABLE = 1733; // Table to exchange with partition is temporary: '%s'
    const ER_PARTITION_INSTEAD_OF_SUBPARTITION = 1734; // Subpartitioned table, use subpartition instead of partition
    const ER_UNKNOWN_PARTITION = 1735; // Unknown partition '%s' in table '%s'
    const ER_TABLES_DIFFERENT_METADATA = 1736; // Tables have different definitions
    const ER_ROW_DOES_NOT_MATCH_PARTITION = 1737; // Found a row that does not match the partition
    const ER_BINLOG_CACHE_SIZE_GREATER_THAN_MAX = 1738; // Option binlog_cache_size (%lu) is greater than max_binlog_cache_size (%lu); setting binlog_cache_size equal to max_binlog_cache_size.
    const ER_WARN_INDEX_NOT_APPLICABLE = 1739; // Cannot use %s access on index '%s' due to type or collation conversion on field '%s'
    const ER_PARTITION_EXCHANGE_FOREIGN_KEY = 1740; // Table to exchange with partition has foreign key references: '%s'
    const ER_NO_SUCH_KEY_VALUE = 1741; // Key value '%s' was not found in table '%s.%s'
    const ER_RPL_INFO_DATA_TOO_LONG = 1742; // Data for column '%s' too long
    const ER_NETWORK_READ_EVENT_CHECKSUM_FAILURE_HY000 = 1743; // Replication event checksum verification failed while reading from network.
    const ER_BINLOG_READ_EVENT_CHECKSUM_FAILURE_HY000 = 1744; // Replication event checksum verification failed while reading from a log file.
    const ER_BINLOG_STMT_CACHE_SIZE_GREATER_THAN_MAX = 1745; // Option binlog_stmt_cache_size (%lu) is greater than max_binlog_stmt_cache_size (%lu); setting binlog_stmt_cache_size equal to max_binlog_stmt_cache_size.
    const ER_CANT_UPDATE_TABLE_IN_CREATE_TABLE_SELECT = 1746; // Can't update table '%s' while '%s' is being created.
    const ER_PARTITION_CLAUSE_ON_NONPARTITIONED = 1747; // PARTITION () clause on non partitioned table
    const ER_ROW_DOES_NOT_MATCH_GIVEN_PARTITION_SET = 1748; // Found a row not matching the given partition set
    const ER_NO_SUCH_PARTITION_UNUSED = 1749; // partition '%s' doesn't exist
    const ER_CHANGE_RPL_INFO_REPOSITORY_FAILURE = 1750; // Failure while changing the type of replication repository: %s.
    const ER_WARNING_NOT_COMPLETE_ROLLBACK_WITH_CREATED_TEMP_TABLE = 1751; // The creation of some temporary tables could not be rolled back.
    const ER_WARNING_NOT_COMPLETE_ROLLBACK_WITH_DROPPED_TEMP_TABLE = 1752; // Some temporary tables were dropped, but these operations could not be rolled back.
    const ER_MTS_FEATURE_IS_NOT_SUPPORTED = 1753; // %s is not supported in multi-threaded slave mode. %s
    const ER_MTS_UPDATED_DBS_GREATER_MAX = 1754; // The number of modified databases exceeds the maximum %d; the database names will not be included in the replication event metadata.
    const ER_MTS_CANT_PARALLEL = 1755; // Cannot execute the current event group in the parallel mode. Encountered event %s, relay-log name %s, position %s which prevents execution of this event group in parallel mode. Reason: %s.
    const ER_MTS_INCONSISTENT_DATA = 1756; // %s
    const ER_FULLTEXT_NOT_SUPPORTED_WITH_PARTITIONING = 1757; // FULLTEXT index is not supported for partitioned tables.
    const ER_DA_INVALID_CONDITION_NUMBER = 1758; // Invalid condition number
    const ER_INSECURE_PLAIN_TEXT = 1759; // Sending passwords in plain text without SSL/TLS is extremely insecure.
    const ER_INSECURE_CHANGE_MASTER = 1760; // Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
    const ER_FOREIGN_DUPLICATE_KEY_WITH_CHILD_INFO = 1761; // Foreign key constraint for table '%s', record '%s' would lead to a duplicate entry in table '%s', key '%s'
    const ER_FOREIGN_DUPLICATE_KEY_WITHOUT_CHILD_INFO = 1762; // Foreign key constraint for table '%s', record '%s' would lead to a duplicate entry in a child table
    const ER_SQLTHREAD_WITH_SECURE_SLAVE = 1763; // Setting authentication options is not possible when only the Slave SQL Thread is being started.
    const ER_TABLE_HAS_NO_FT = 1764; // The table does not have FULLTEXT index to support this query
    const ER_VARIABLE_NOT_SETTABLE_IN_SF_OR_TRIGGER = 1765; // The system variable %s cannot be set in stored functions or triggers.
    const ER_VARIABLE_NOT_SETTABLE_IN_TRANSACTION = 1766; // The system variable %s cannot be set when there is an ongoing transaction.
    const ER_GTID_NEXT_IS_NOT_IN_GTID_NEXT_LIST = 1767; // The system variable @@SESSION.GTID_NEXT has the value %s, which is not listed in @@SESSION.GTID_NEXT_LIST.
    const ER_CANT_CHANGE_GTID_NEXT_IN_TRANSACTION_WHEN_GTID_NEXT_LIST_IS_NULL = 1768; // The system variable @@SESSION.GTID_NEXT cannot change inside a transaction.
    const ER_SET_STATEMENT_CANNOT_INVOKE_FUNCTION = 1769; // The statement 'SET %s' cannot invoke a stored function.
    const ER_GTID_NEXT_CANT_BE_AUTOMATIC_IF_GTID_NEXT_LIST_IS_NON_NULL = 1770; // The system variable @@SESSION.GTID_NEXT cannot be 'AUTOMATIC' when @@SESSION.GTID_NEXT_LIST is non-NULL.
    const ER_SKIPPING_LOGGED_TRANSACTION = 1771; // Skipping transaction %s because it has already been executed and logged.
    const ER_MALFORMED_GTID_SET_SPECIFICATION = 1772; // Malformed GTID set specification '%s'.
    const ER_MALFORMED_GTID_SET_ENCODING = 1773; // Malformed GTID set encoding.
    const ER_MALFORMED_GTID_SPECIFICATION = 1774; // Malformed GTID specification '%s'.
    const ER_GNO_EXHAUSTED = 1775; // Impossible to generate Global Transaction Identifier: the integer component reached the maximal value. Restart the server with a new server_uuid.
    const ER_BAD_SLAVE_AUTO_POSITION = 1776; // Parameters MASTER_LOG_FILE, MASTER_LOG_POS, RELAY_LOG_FILE and RELAY_LOG_POS cannot be set when MASTER_AUTO_POSITION is active.
    const ER_AUTO_POSITION_REQUIRES_GTID_MODE_ON = 1777; // CHANGE MASTER TO MASTER_AUTO_POSITION = 1 can only be executed when @@GLOBAL.GTID_MODE = ON.
    const ER_CANT_DO_IMPLICIT_COMMIT_IN_TRX_WHEN_GTID_NEXT_IS_SET = 1778; // Cannot execute statements with implicit commit inside a transaction when @@SESSION.GTID_NEXT != AUTOMATIC.
    const ER_GTID_MODE_2_OR_3_REQUIRES_DISABLE_GTID_UNSAFE_STATEMENTS_ON = 1779; // GTID_MODE = ON or GTID_MODE = UPGRADE_STEP_2 requires DISABLE_GTID_UNSAFE_STATEMENTS = 1.
    const ER_GTID_MODE_2_OR_3_REQUIRES_ENFORCE_GTID_CONSISTENCY_ON = 1779; // @@GLOBAL.GTID_MODE = ON or UPGRADE_STEP_2 requires @@GLOBAL.ENFORCE_GTID_CONSISTENCY = 1.
    const ER_GTID_MODE_REQUIRES_BINLOG = 1780; // @@GLOBAL.GTID_MODE = ON or UPGRADE_STEP_1 or UPGRADE_STEP_2 requires --log-bin and --log-slave-updates.
    const ER_CANT_SET_GTID_NEXT_TO_GTID_WHEN_GTID_MODE_IS_OFF = 1781; // @@SESSION.GTID_NEXT cannot be set to UUID:NUMBER when @@GLOBAL.GTID_MODE = OFF.
    const ER_CANT_SET_GTID_NEXT_TO_ANONYMOUS_WHEN_GTID_MODE_IS_ON = 1782; // @@SESSION.GTID_NEXT cannot be set to ANONYMOUS when @@GLOBAL.GTID_MODE = ON.
    const ER_CANT_SET_GTID_NEXT_LIST_TO_NON_NULL_WHEN_GTID_MODE_IS_OFF = 1783; // @@SESSION.GTID_NEXT_LIST cannot be set to a non-NULL value when @@GLOBAL.GTID_MODE = OFF.
    const ER_FOUND_GTID_EVENT_WHEN_GTID_MODE_IS_OFF = 1784; // Found a Gtid_log_event or Previous_gtids_log_event when @@GLOBAL.GTID_MODE = OFF.
    const ER_GTID_UNSAFE_NON_TRANSACTIONAL_TABLE = 1785; // When @@GLOBAL.ENFORCE_GTID_CONSISTENCY = 1, updates to non-transactional tables can only be done in either autocommitted statements or single-statement transactions, and never in the same statement as updates to transactional tables.
    const ER_GTID_UNSAFE_CREATE_SELECT = 1786; // CREATE TABLE ... SELECT is forbidden when @@GLOBAL.ENFORCE_GTID_CONSISTENCY = 1.
    const ER_GTID_UNSAFE_CREATE_DROP_TEMPORARY_TABLE_IN_TRANSACTION = 1787; // When @@GLOBAL.ENFORCE_GTID_CONSISTENCY = 1, the statements CREATE TEMPORARY TABLE and DROP TEMPORARY TABLE can be executed in a non-transactional context only, and require that AUTOCOMMIT = 1.
    const ER_GTID_MODE_CAN_ONLY_CHANGE_ONE_STEP_AT_A_TIME = 1788; // The value of @@GLOBAL.GTID_MODE can only change one step at a time: OFF &lt;-&gt; UPGRADE_STEP_1 &lt;-&gt; UPGRADE_STEP_2 &lt;-&gt; ON. Also note that this value must be stepped up or down simultaneously on all servers; see the Manual for instructions.
    const ER_MASTER_HAS_PURGED_REQUIRED_GTIDS = 1789; // The slave is connecting using CHANGE MASTER TO MASTER_AUTO_POSITION = 1, but the master has purged binary logs containing GTIDs that the slave requires.
    const ER_CANT_SET_GTID_NEXT_WHEN_OWNING_GTID = 1790; // @@SESSION.GTID_NEXT cannot be changed by a client that owns a GTID. The client owns %s. Ownership is released on COMMIT or ROLLBACK.
    const ER_UNKNOWN_EXPLAIN_FORMAT = 1791; // Unknown EXPLAIN format name: '%s'
    const ER_CANT_EXECUTE_IN_READ_ONLY_TRANSACTION = 1792; // Cannot execute statement in a READ ONLY transaction.
    const ER_TOO_LONG_TABLE_PARTITION_COMMENT = 1793; // Comment for table partition '%s' is too long (max = %lu
    const ER_SLAVE_CONFIGURATION = 1794; // Slave is not configured or failed to initialize properly. You must at least set --server-id to enable either a master or a slave. Additional error messages can be found in the MySQL error log.
    const ER_INNODB_FT_LIMIT = 1795; // InnoDB presently supports one FULLTEXT index creation at a time
    const ER_INNODB_NO_FT_TEMP_TABLE = 1796; // Cannot create FULLTEXT index on temporary InnoDB table
    const ER_INNODB_FT_WRONG_DOCID_COLUMN = 1797; // Column '%s' is of wrong type for an InnoDB FULLTEXT index
    const ER_INNODB_FT_WRONG_DOCID_INDEX = 1798; // Index '%s' is of wrong type for an InnoDB FULLTEXT index
    const ER_INNODB_ONLINE_LOG_TOO_BIG = 1799; // Creating index '%s' required more than 'innodb_online_alter_log_max_size' bytes of modification log. Please try again.
    const ER_UNKNOWN_ALTER_ALGORITHM = 1800; // Unknown ALGORITHM '%s'
    const ER_UNKNOWN_ALTER_LOCK = 1801; // Unknown LOCK type '%s'
    const ER_MTS_CHANGE_MASTER_CANT_RUN_WITH_GAPS = 1802; // CHANGE MASTER cannot be executed when the slave was stopped with an error or killed in MTS mode. Consider using RESET SLAVE or START SLAVE UNTIL.
    const ER_MTS_RECOVERY_FAILURE = 1803; // Cannot recover after SLAVE errored out in parallel execution mode. Additional error messages can be found in the MySQL error log.
    const ER_MTS_RESET_WORKERS = 1804; // Cannot clean up worker info tables. Additional error messages can be found in the MySQL error log.
    const ER_COL_COUNT_DOESNT_MATCH_CORRUPTED_V2 = 1805; // Column count of %s.%s is wrong. Expected %d, found %d. The table is probably corrupted
    const ER_SLAVE_SILENT_RETRY_TRANSACTION = 1806; // Slave must silently retry current transaction
    const ER_DISCARD_FK_CHECKS_RUNNING = 1807; // There is a foreign key check running on table '%s'. Cannot discard the table.
    const ER_TABLE_SCHEMA_MISMATCH = 1808; // Schema mismatch (%s
    const ER_TABLE_IN_SYSTEM_TABLESPACE = 1809; // Table '%s' in system tablespace
    const ER_IO_READ_ERROR = 1810; // IO Read error: (%lu, %s) %s
    const ER_IO_WRITE_ERROR = 1811; // IO Write error: (%lu, %s) %s
    const ER_TABLESPACE_MISSING = 1812; // Tablespace is missing for table '%s'
    const ER_TABLESPACE_EXISTS = 1813; // Tablespace for table '%s' exists. Please DISCARD the tablespace before IMPORT.
    const ER_TABLESPACE_DISCARDED = 1814; // Tablespace has been discarded for table '%s'
    const ER_INTERNAL_ERROR_HY000 = 1815; // Internal error: %s
    const ER_INNODB_IMPORT_ERROR = 1816; // ALTER TABLE '%s' IMPORT TABLESPACE failed with error %lu : '%s'
    const ER_INNODB_INDEX_CORRUPT = 1817; // Index corrupt: %s
    const ER_INVALID_YEAR_COLUMN_LENGTH = 1818; // YEAR(%lu) column type is deprecated. Creating YEAR(4) column instead.
    const ER_NOT_VALID_PASSWORD = 1819; // Your password does not satisfy the current policy requirements
    const ER_MUST_CHANGE_PASSWORD = 1820; // You must SET PASSWORD before executing this statement
    const ER_FK_NO_INDEX_CHILD = 1821; // Failed to add the foreign key constaint. Missing index for constraint '%s' in the foreign table '%s'
    const ER_FK_NO_INDEX_PARENT = 1822; // Failed to add the foreign key constaint. Missing index for constraint '%s' in the referenced table '%s'
    const ER_FK_FAIL_ADD_SYSTEM = 1823; // Failed to add the foreign key constraint '%s' to system tables
    const ER_FK_CANNOT_OPEN_PARENT = 1824; // Failed to open the referenced table '%s'
    const ER_FK_INCORRECT_OPTION = 1825; // Failed to add the foreign key constraint on table '%s'. Incorrect options in FOREIGN KEY constraint '%s'
    const ER_FK_DUP_NAME = 1826; // Duplicate foreign key constraint name '%s'
    const ER_PASSWORD_FORMAT = 1827; // The password hash doesn't have the expected format. Check if the correct password algorithm is being used with the PASSWORD() function.
    const ER_FK_COLUMN_CANNOT_DROP = 1828; // Cannot drop column '%s': needed in a foreign key constraint '%s'
    const ER_FK_COLUMN_CANNOT_DROP_CHILD = 1829; // Cannot drop column '%s': needed in a foreign key constraint '%s' of table '%s'
    const ER_FK_COLUMN_NOT_NULL = 1830; // Column '%s' cannot be NOT NULL: needed in a foreign key constraint '%s' SET NULL
    const ER_DUP_INDEX = 1831; // Duplicate index '%s' defined on the table '%s.%s'. This is deprecated and will be disallowed in a future release.
    const ER_FK_COLUMN_CANNOT_CHANGE = 1832; // Cannot change column '%s': used in a foreign key constraint '%s'
    const ER_FK_COLUMN_CANNOT_CHANGE_CHILD = 1833; // Cannot change column '%s': used in a foreign key constraint '%s' of table '%s'
    const ER_FK_CANNOT_DELETE_PARENT = 1834; // Cannot delete rows from table which is parent in a foreign key constraint '%s' of table '%s'
    const ER_MALFORMED_PACKET = 1835; // Malformed communication packet.
    const ER_READ_ONLY_MODE = 1836; // Running in read-only mode
    const ER_GTID_NEXT_TYPE_UNDEFINED_GROUP = 1837; // When @@SESSION.GTID_NEXT is set to a GTID, you must explicitly set it to a different value after a COMMIT or ROLLBACK. Please check GTID_NEXT variable manual page for detailed explanation. Current @@SESSION.GTID_NEXT is '%s'.
    const ER_VARIABLE_NOT_SETTABLE_IN_SP = 1838; // The system variable %s cannot be set in stored procedures.
    const ER_CANT_SET_GTID_PURGED_WHEN_GTID_MODE_IS_OFF = 1839; // @@GLOBAL.GTID_PURGED can only be set when @@GLOBAL.GTID_MODE = ON.
    const ER_CANT_SET_GTID_PURGED_WHEN_GTID_EXECUTED_IS_NOT_EMPTY = 1840; // @@GLOBAL.GTID_PURGED can only be set when @@GLOBAL.GTID_EXECUTED is empty.
    const ER_CANT_SET_GTID_PURGED_WHEN_OWNED_GTIDS_IS_NOT_EMPTY = 1841; // @@GLOBAL.GTID_PURGED can only be set when there are no ongoing transactions (not even in other clients).
    const ER_GTID_PURGED_WAS_CHANGED = 1842; // @@GLOBAL.GTID_PURGED was changed from '%s' to '%s'.
    const ER_GTID_EXECUTED_WAS_CHANGED = 1843; // @@GLOBAL.GTID_EXECUTED was changed from '%s' to '%s'.
    const ER_BINLOG_STMT_MODE_AND_NO_REPL_TABLES = 1844; // Cannot execute statement: impossible to write to binary log since BINLOG_FORMAT = STATEMENT, and both replicated and non replicated tables are written to.
    const ER_ALTER_OPERATION_NOT_SUPPORTED = 1845; // %s is not supported for this operation. Try %s.
    const ER_ALTER_OPERATION_NOT_SUPPORTED_REASON = 1846; // %s is not supported. Reason: %s. Try %s.
    const ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_COPY = 1847; // COPY algorithm requires a lock
    const ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_PARTITION = 1848; // Partition specific operations do not yet support LOCK/ALGORITHM
    const ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_FK_RENAME = 1849; // Columns participating in a foreign key are renamed
    const ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_COLUMN_TYPE = 1850; // Cannot change column type INPLACE
    const ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_FK_CHECK = 1851; // Adding foreign keys needs foreign_key_checks=OFF
    const ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_IGNORE = 1852; // Creating unique indexes with IGNORE requires COPY algorithm to remove duplicate rows
    const ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_NOPK = 1853; // Dropping a primary key is not allowed without also adding a new primary key
    const ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_AUTOINC = 1854; // Adding an auto-increment column requires a lock
    const ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_HIDDEN_FTS = 1855; // Cannot replace hidden FTS_DOC_ID with a user-visible one
    const ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_CHANGE_FTS = 1856; // Cannot drop or rename FTS_DOC_ID
    const ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_FTS = 1857; // Fulltext index creation requires a lock
    const ER_SQL_SLAVE_SKIP_COUNTER_NOT_SETTABLE_IN_GTID_MODE = 1858; // sql_slave_skip_counter can not be set when the server is running with @@GLOBAL.GTID_MODE = ON. Instead, for each transaction that you want to skip, generate an empty transaction with the same GTID as the transaction
    const ER_DUP_UNKNOWN_IN_INDEX = 1859; // Duplicate entry for key '%s'
    const ER_IDENT_CAUSES_TOO_LONG_PATH = 1860; // Long database name and identifier for object resulted in path length exceeding %d characters. Path: '%s'.
    const ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_NOT_NULL = 1861; // cannot silently convert NULL values, as required in this SQL_MODE
    const ER_MUST_CHANGE_PASSWORD_LOGIN = 1862; // Your password has expired. To log in you must change it using a client that supports expired passwords.
    const ER_ROW_IN_WRONG_PARTITION = 1863; // Found a row in wrong partition %s
    const ER_MTS_EVENT_BIGGER_PENDING_JOBS_SIZE_MAX = 1864; // Cannot schedule event %s, relay-log name %s, position %s to Worker thread because its size %lu exceeds %lu of slave_pending_jobs_size_max.
    const ER_INNODB_NO_FT_USES_PARSER = 1865; // Cannot CREATE FULLTEXT INDEX WITH PARSER on InnoDB table
    const ER_BINLOG_LOGICAL_CORRUPTION = 1866; // The binary log file '%s' is logically corrupted: %s
    const ER_WARN_PURGE_LOG_IN_USE = 1867; // file %s was not purged because it was being read by %d thread(s), purged only %d out of %d files.
    const ER_WARN_PURGE_LOG_IS_ACTIVE = 1868; // file %s was not purged because it is the active log file.
    const ER_AUTO_INCREMENT_CONFLICT = 1869; // Auto-increment value in UPDATE conflicts with internally generated values
    const WARN_ON_BLOCKHOLE_IN_RBR = 1870; // Row events are not logged for %s statements that modify BLACKHOLE tables in row format. Table(s): '%s'
    const ER_SLAVE_MI_INIT_REPOSITORY = 1871; // Slave failed to initialize master info structure from the repository
    const ER_SLAVE_RLI_INIT_REPOSITORY = 1872; // Slave failed to initialize relay log info structure from the repository
    const ER_ACCESS_DENIED_CHANGE_USER_ERROR = 1873; // Access denied trying to change to user '%s'@'%s' (using password: %s). Disconnecting.
    const ER_INNODB_READ_ONLY = 1874; // InnoDB is in read only mode.
    const ER_STOP_SLAVE_SQL_THREAD_TIMEOUT = 1875; // STOP SLAVE command execution is incomplete: Slave SQL thread got the stop signal, thread is busy, SQL thread will stop once the current task is complete.
    const ER_STOP_SLAVE_IO_THREAD_TIMEOUT = 1876; // STOP SLAVE command execution is incomplete: Slave IO thread got the stop signal, thread is busy, IO thread will stop once the current task is complete.
    const ER_TABLE_CORRUPT = 1877; // Operation cannot be performed. The table '%s.%s' is missing, corrupt or contains bad data.
    const ER_TEMP_FILE_WRITE_FAILURE = 1878; // Temporary file write failure.
    const ER_INNODB_FT_AUX_NOT_HEX_ID = 1879; // Upgrade index name failed, please use create index(alter table) algorithm copy to rebuild index.
    const ER_OLD_TEMPORALS_UPGRADED = 1880; // TIME/TIMESTAMP/DATETIME columns of old format have been upgraded to the new format.
    const ER_INNODB_FORCED_RECOVERY = 1881; // Operation not allowed when innodb_forced_recovery &gt; 0.
    const ER_AES_INVALID_IV = 1882; // The initialization vector supplied to %s is too short. Must be at least %d bytes long
    const ER_PLUGIN_CANNOT_BE_UNINSTALLED = 1883; // Plugin '%s' cannot be uninstalled now. %s
    const ER_GTID_UNSAFE_BINLOG_SPLITTABLE_STATEMENT_AND_GTID_GROUP = 1884; // Cannot execute statement because it needs to be written to the binary log as multiple statements, and this is not allowed when @@SESSION.GTID_NEXT == 'UUID:NUMBER'.
    const ER_SLAVE_HAS_MORE_GTIDS_THAN_MASTER = 1885; // Slave has more GTIDs than the master has, using the master's SERVER_UUID. This may indicate that the end of the binary log was truncated or that the last binary log file was lost, e.g., after a power or disk failure when sync_binlog != 1. The master may or may not have rolled back transactions that were already replicated to the slave. Suggest to replicate any transactions that master has rolled back from slave to master, and/or commit empty transactions on master to account for transactions that have been committed on master but are not included in GTID_EXECUTED.
    const ER_VCOL_BASED_ON_VCOL = 1900; // A computed column cannot be based on a computed column
    const ER_VIRTUAL_COLUMN_FUNCTION_IS_NOT_ALLOWED = 1901; // Function or expression is not allowed for column '%s'
    const ER_DATA_CONVERSION_ERROR_FOR_VIRTUAL_COLUMN = 1902; // Generated value for computed column '%s' cannot be converted to type '%s'
    const ER_PRIMARY_KEY_BASED_ON_VIRTUAL_COLUMN = 1903; // Primary key cannot be defined upon a computed column
    const ER_KEY_BASED_ON_GENERATED_VIRTUAL_COLUMN = 1904; // Key/Index cannot be defined on a non-stored computed column
    const ER_WRONG_FK_OPTION_FOR_VIRTUAL_COLUMN = 1905; // Cannot define foreign key with %s clause on a computed column
    const ER_WARNING_NON_DEFAULT_VALUE_FOR_VIRTUAL_COLUMN = 1906; // The value specified for computed column '%s' in table '%s' ignored
    const ER_UNSUPPORTED_ACTION_ON_VIRTUAL_COLUMN = 1907; // This is not yet supported for computed columns
    const ER_CONST_EXPR_IN_VCOL = 1908; // Constant expression in computed column function is not allowed
    const ER_ROW_EXPR_FOR_VCOL = 1909; // Expression for computed column cannot return a row
    const ER_UNSUPPORTED_ENGINE_FOR_VIRTUAL_COLUMNS = 1910; // %s storage engine does not support computed columns
    const ER_UNKNOWN_OPTION = 1911; // Unknown option '%-.64s'
    const ER_BAD_OPTION_VALUE = 1912; // Incorrect value '%-.64s' for option '%-.64s'
    const ER_NETWORK_READ_EVENT_CHECKSUM_FAILURE = 1913; // Replication event checksum verification failed while reading from network.
    const ER_BINLOG_READ_EVENT_CHECKSUM_FAILURE = 1914; // Replication event checksum verification failed while reading from a log file.
    const ER_CANT_DO_ONLINE = 1915; // Can't execute the given '%s' command as online
    const ER_DATA_OVERFLOW = 1916; // Got overflow when converting '%-.128s' to %-.32s. Value truncated.
    const ER_DATA_TRUNCATED = 1917; // Truncated value '%-.128s' when converting to %-.32s
    const ER_BAD_DATA = 1918; // Encountered illegal value '%-.128s' when converting to %-.32s
    const ER_DYN_COL_WRONG_FORMAT = 1919; // Encountered illegal format of dynamic column string
    const ER_DYN_COL_IMPLEMENTATION_LIMIT = 1920; // Dynamic column implementation limit reached
    const ER_DYN_COL_DATA = 1921; // Illegal value used as argument of dynamic column function
    const ER_DYN_COL_WRONG_CHARSET = 1922; // Dynamic column contains unknown character set
    const ER_ILLEGAL_SUBQUERY_OPTIMIZER_SWITCHES = 1923; // At least one of the 'in_to_exists' or 'materialization' optimizer_switch flags must be 'on'.
    const ER_QUERY_CACHE_IS_DISABLED = 1924; // Query cache is disabled (resize or similar command in progress); repeat this command later
    const ER_QUERY_CACHE_IS_GLOBALY_DISABLED = 1925; // Query cache is globally disabled and you can't enable it only for this session
    const ER_VIEW_ORDERBY_IGNORED = 1926; // View '%-.192s'.'%-.192s' ORDER BY clause ignored because there is other ORDER BY clause already.
    const ER_CONNECTION_KILLED = 1927; // Connection was killed
    const ER_INTERNAL_ERROR = 1928; // Internal error: '%-.192s'
    const ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_SKIP_REPLICATION = 1929; // Cannot modify @@session.skip_replication inside a transaction
    const ER_STORED_FUNCTION_PREVENTS_SWITCH_SKIP_REPLICATION = 1930; // Cannot modify @@session.skip_replication inside a stored function or trigger
    const ER_QUERY_EXCEEDED_ROWS_EXAMINED_LIMIT = 1931; // Query execution was interrupted. The query examined at least %llu rows, which exceeds LIMIT ROWS EXAMINED (%llu). The query result may be incomplete.
    const ER_NO_SUCH_TABLE_IN_ENGINE = 1932; // Table '%-.192s.%-.192s' doesn't exist in engine
    const ER_TARGET_NOT_EXPLAINABLE = 1933; // Target is not running an EXPLAINable command
    const ER_CONNECTION_ALREADY_EXISTS = 1934; // Connection '%.*s' conflicts with existing connection '%.*s'
    const ER_MASTER_LOG_PREFIX = 1935; // Master '%.*s':
    const ER_CANT_START_STOP_SLAVE = 1936; // Can't %s SLAVE '%.*s'
    const ER_SLAVE_STARTED = 1937; // SLAVE '%.*s' started
    const ER_SLAVE_STOPPED = 1938; // SLAVE '%.*s' stopped
    const ER_SQL_DISCOVER_ERROR = 1939; // Engine %s failed to discover table %`-.192s.%`-.192s with '%s'
    const ER_FAILED_GTID_STATE_INIT = 1940; // Failed initializing replication GTID state
    const ER_INCORRECT_GTID_STATE = 1941; // Could not parse GTID list
    const ER_CANNOT_UPDATE_GTID_STATE = 1942; // Could not update replication slave gtid state
    const ER_DUPLICATE_GTID_DOMAIN = 1943; // GTID %u-%u-%llu and %u-%u-%llu conflict (duplicate domain id %u)
    const ER_GTID_OPEN_TABLE_FAILED = 1944; // Failed to open %s.%s
    const ER_GTID_POSITION_NOT_FOUND_IN_BINLOG = 1945; // Connecting slave requested to start from GTID %u-%u-%llu, which is not in the master's binlog
    const ER_CANNOT_LOAD_SLAVE_GTID_STATE = 1946; // Failed to load replication slave GTID position from table %s.%s
    const ER_MASTER_GTID_POS_CONFLICTS_WITH_BINLOG = 1947; // Specified GTID %u-%u-%llu conflicts with the binary log which contains a more recent GTID %u-%u-%llu. If MASTER_GTID_POS=CURRENT_POS is used, the binlog position will override the new value of @@gtid_slave_pos.
    const ER_MASTER_GTID_POS_MISSING_DOMAIN = 1948; // Specified value for @@gtid_slave_pos contains no value for replication domain %u. This conflicts with the binary log which contains GTID %u-%u-%llu. If MASTER_GTID_POS=CURRENT_POS is used, the binlog position will override the new value of @@gtid_slave_pos.
    const ER_UNTIL_REQUIRES_USING_GTID = 1949; // START SLAVE UNTIL master_gtid_pos requires that slave is using GTID
    const ER_GTID_STRICT_OUT_OF_ORDER = 1950; // An attempt was made to binlog GTID %u-%u-%llu which would create an out-of-order sequence number with existing GTID %u-%u-%llu, and gtid strict mode is enabled.
    const ER_GTID_START_FROM_BINLOG_HOLE = 1951; // The binlog on the master is missing the GTID %u-%u-%llu requested by the slave (even though a subsequent sequence number does exist), and GTID strict mode is enabled
    const ER_SLAVE_UNEXPECTED_MASTER_SWITCH = 1952; // Unexpected GTID received from master after reconnect. This normally indicates that the master server was replaced without restarting the slave threads. %s
    const ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_GTID_DOMAIN_ID_SEQ_NO = 1953; // Cannot modify @@session.gtid_domain_id or @@session.gtid_seq_no inside a transaction
    const ER_STORED_FUNCTION_PREVENTS_SWITCH_GTID_DOMAIN_ID_SEQ_NO = 1954; // Cannot modify @@session.gtid_domain_id or @@session.gtid_seq_no inside a stored function or trigger
    const ER_GTID_POSITION_NOT_FOUND_IN_BINLOG2 = 1955; // Connecting slave requested to start from GTID %u-%u-%llu, which is not in the master's binlog. Since the master's binlog contains GTIDs with higher sequence numbers, it probably means that the slave has diverged due to executing extra errorneous transactions
    const ER_BINLOG_MUST_BE_EMPTY = 1956; // This operation is not allowed if any GTID has been logged to the binary log. Run RESET MASTER first to erase the log
    const ER_NO_SUCH_QUERY = 1957; // Unknown query id: %lld
    const ER_BAD_BASE64_DATA = 1958; // Bad base64 data as position %u
    const ER_INVALID_ROLE = 1959; // Invalid role specification %`s.
    const ER_INVALID_CURRENT_USER = 1960; // The current user is invalid.
    const ER_CANNOT_GRANT_ROLE = 1961; // Cannot grant role '%s' to: %s.
    const ER_CANNOT_REVOKE_ROLE = 1962; // Cannot revoke role '%s' from: %s.
    const ER_CHANGE_SLAVE_PARALLEL_THREADS_ACTIVE = 1963; // Cannot change @@slave_parallel_threads while another change is in progress
    const ER_PRIOR_COMMIT_FAILED = 1964; // Commit failed due to failure of an earlier commit on which this one depends
    const ER_IT_IS_A_VIEW = 1965; // '%-.192s' is a view
    const ER_SLAVE_SKIP_NOT_IN_GTID = 1966; // When using GTID, @@sql_slave_skip_counter can not be used. Instead, setting @@gtid_slave_pos explicitly can be used to skip to after a given GTID position.
    const ER_TABLE_DEFINITION_TOO_BIG = 1967; // The definition for table %`s is too big
    const ER_PLUGIN_INSTALLED = 1968; // Plugin '%-.192s' already installed
    const ER_STATEMENT_TIMEOUT = 1969; // Query execution was interrupted (max_statement_time exceeded)
    const ER_SUBQUERIES_NOT_SUPPORTED = 1970; // %s does not support subqueries or stored functions.
    const ER_SET_STATEMENT_NOT_SUPPORTED = 1971; // The system variable %.200s cannot be set in SET STATEMENT.
    const ER_UNUSED_17 = 1972; // You should never see it
    const ER_USER_CREATE_EXISTS = 1973; // Can't create user '%-.64s'@'%-.64s'; it already exists
    const ER_USER_DROP_EXISTS = 1974; // Can't drop user '%-.64s'@'%-.64s'; it doesn't exist
    const ER_ROLE_CREATE_EXISTS = 1975; // Can't create role '%-.64s'; it already exists
    const ER_ROLE_DROP_EXISTS = 1976; // Can't drop role '%-.64s'; it doesn't exist
    const ER_CANNOT_CONVERT_CHARACTER = 1977; // Cannot convert '%s' character 0x%-.64s to '%s'
    const ER_INVALID_DEFAULT_VALUE_FOR_FIELD = 1978; // Incorrect default value '%-.128s' for column '%.192s'
    const ER_KILL_QUERY_DENIED_ERROR = 1979; // You are not owner of query %lu
    const ER_NO_EIS_FOR_FIELD = 1980; // Engine-independent statistics are not collected for column '%s'
    const ER_WARN_AGGFUNC_DEPENDENCE = 1981; // Aggregate function '%-.192s)' of SELECT #%d belongs to SELECT #%d
    const WARN_INNODB_PARTITION_OPTION_IGNORED = 1982; // &lt;%-.64s&gt; option ignored for InnoDB partition
    const ER_FILE_CORRUPT = 3000; // File %s is corrupted
    const ER_ERROR_ON_MASTER = 3001; // Query partially completed on the master (error on master: %d) and was aborted. There is a chance that your master is inconsistent at this point. If you are sure that your master is ok, run this query manually on the slave and then restart the slave with SET GLOBAL SQL_SLAVE_SKIP_COUNTER=1; START SLAVE;. Query:'%s'"
    const ER_INCONSISTENT_ERROR = 3002; // Query caused different errors on master and slave. Error on master: message (format)='%s' error code=%d; Error on slave:actual message='%s', error code=%d. Default database:'%s'. Query:'%s'
    const ER_STORAGE_ENGINE_NOT_LOADED = 3003; // Storage engine for table '%s'.'%s' is not loaded.
    const ER_GET_STACKED_DA_WITHOUT_ACTIVE_HANDLER = 3004; // GET STACKED DIAGNOSTICS when handler not active
    const ER_WARN_LEGACY_SYNTAX_CONVERTED = 3005; // %s is no longer supported. The statement was converted to %s.
    const ER_BINLOG_UNSAFE_FULLTEXT_PLUGIN = 3006; // Statement is unsafe because it uses a fulltext parser plugin which may not return the same value on the slave.
    const ER_CANNOT_DISCARD_TEMPORARY_TABLE = 3007; // Cannot DISCARD/IMPORT tablespace associated with temporary table
    const ER_FK_DEPTH_EXCEEDED = 3008; // Foreign key cascade delete/update exceeds max depth of %d.
    const ER_COL_COUNT_DOESNT_MATCH_PLEASE_UPDATE_V2 = 3009; // Column count of %s.%s is wrong. Expected %d, found %d. Created with MariaDB %d, now running %d. Please use mysql_upgrade to fix this error.
    const ER_WARN_TRIGGER_DOESNT_HAVE_CREATED = 3010; // Trigger %s.%s.%s does not have CREATED attribute.
    const ER_REFERENCED_TRG_DOES_NOT_EXIST_MYSQL = 3011; // Referenced trigger '%s' for the given action time and event type does not exist.
    const ER_EXPLAIN_NOT_SUPPORTED = 3012; // EXPLAIN FOR CONNECTION command is supported only for SELECT/UPDATE/INSERT/DELETE/REPLACE
    const ER_INVALID_FIELD_SIZE = 3013; // Invalid size for column '%-.192s'.
    const ER_MISSING_HA_CREATE_OPTION = 3014; // Table storage engine '%-.64s' found required create option missing
    const ER_ENGINE_OUT_OF_MEMORY = 3015; // Out of memory in storage engine '%-.64s'.
    const ER_PASSWORD_EXPIRE_ANONYMOUS_USER = 3016; // The password for anonymous user cannot be expired.
    const ER_SLAVE_SQL_THREAD_MUST_STOP = 3017; // This operation cannot be performed with a running slave sql thread; run STOP SLAVE SQL_THREAD first
    const ER_NO_FT_MATERIALIZED_SUBQUERY = 3018; // Cannot create FULLTEXT index on materialized subquery
    const ER_INNODB_UNDO_LOG_FULL = 3019; // Undo Log error: %s
    const ER_INVALID_ARGUMENT_FOR_LOGARITHM = 3020; // Invalid argument for logarithm
    const ER_SLAVE_CHANNEL_IO_THREAD_MUST_STOP = 3021; // This operation cannot be performed with a running slave io thread; run STOP SLAVE IO_THREAD FOR CHANNEL '%s' first.
    const ER_WARN_OPEN_TEMP_TABLES_MUST_BE_ZERO = 3022; // This operation may not be safe when the slave has temporary tables. The tables will be kept open until the server restarts or until the tables are deleted by any replicated DROP statement. Suggest to wait until slave_open_temp_tables = 0.
    const ER_WARN_ONLY_MASTER_LOG_FILE_NO_POS = 3023; // CHANGE MASTER TO with a MASTER_LOG_FILE clause but no MASTER_LOG_POS clause may not be safe. The old position value may not be valid for the new binary log file.
    const ER_QUERY_TIMEOUT = 3024; // Query execution was interrupted, maximum statement execution time exceeded
    const ER_NON_RO_SELECT_DISABLE_TIMER = 3025; // Select is not a read only statement, disabling timer
    const ER_DUP_LIST_ENTRY = 3026; // Duplicate entry '%-.192s'.
    const ER_SQL_MODE_NO_EFFECT = 3027; // '%s' mode no longer has any effect. Use STRICT_ALL_TABLES or STRICT_TRANS_TABLES instead.
    const ER_AGGREGATE_ORDER_FOR_UNION = 3028; // Expression #%u of ORDER BY contains aggregate function and applies to a UNION
    const ER_AGGREGATE_ORDER_NON_AGG_QUERY = 3029; // Expression #%u of ORDER BY contains aggregate function and applies to the result of a non-aggregated query
    const ER_SLAVE_WORKER_STOPPED_PREVIOUS_THD_ERROR = 3030; // Slave worker has stopped after at least one previous worker encountered an error when slave-preserve-commit-order was enabled. To preserve commit order, the last transaction executed by this thread has not been committed. When restarting the slave after fixing any failed threads, you should fix this worker as well.
    const ER_DONT_SUPPORT_SLAVE_PRESERVE_COMMIT_ORDER = 3031; // slave_preserve_commit_order is not supported %s.
    const ER_SERVER_OFFLINE_MODE = 3032; // The server is currently in offline mode
    const ER_GIS_DIFFERENT_SRIDS = 3033; // Binary geometry function %s given two geometries of different srids: %u and %u, which should have been identical.
    const ER_GIS_UNSUPPORTED_ARGUMENT = 3034; // Calling geometry function %s with unsupported types of arguments.
    const ER_GIS_UNKNOWN_ERROR = 3035; // Unknown GIS error occurred in function %s.
    const ER_GIS_UNKNOWN_EXCEPTION = 3036; // Unknown exception caught in GIS function %s.
    const ER_GIS_INVALID_DATA = 3037; // Invalid GIS data provided to function %s.
    const ER_BOOST_GEOMETRY_EMPTY_INPUT_EXCEPTION = 3038; // The geometry has no data in function %s.
    const ER_BOOST_GEOMETRY_CENTROID_EXCEPTION = 3039; // Unable to calculate centroid because geometry is empty in function %s.
    const ER_BOOST_GEOMETRY_OVERLAY_INVALID_INPUT_EXCEPTION = 3040; // Geometry overlay calculation error: geometry data is invalid in function %s.
    const ER_BOOST_GEOMETRY_TURN_INFO_EXCEPTION = 3041; // Geometry turn info calculation error: geometry data is invalid in function %s.
    const ER_BOOST_GEOMETRY_SELF_INTERSECTION_POINT_EXCEPTION = 3042; // Analysis procedures of intersection points interrupted unexpectedly in function %s.
    const ER_BOOST_GEOMETRY_UNKNOWN_EXCEPTION = 3043; // Unknown exception thrown in function %s.
    const ER_STD_BAD_ALLOC_ERROR = 3044; // Memory allocation error: %-.256s in function %s.
    const ER_STD_DOMAIN_ERROR = 3045; // Domain error: %-.256s in function %s.
    const ER_STD_LENGTH_ERROR = 3046; // Length error: %-.256s in function %s.
    const ER_STD_INVALID_ARGUMENT = 3047; // Invalid argument error: %-.256s in function %s.
    const ER_STD_OUT_OF_RANGE_ERROR = 3048; // Out of range error: %-.256s in function %s.
    const ER_STD_OVERFLOW_ERROR = 3049; // Overflow error error: %-.256s in function %s.
    const ER_STD_RANGE_ERROR = 3050; // Range error: %-.256s in function %s.
    const ER_STD_UNDERFLOW_ERROR = 3051; // Underflow error: %-.256s in function %s.
    const ER_STD_LOGIC_ERROR = 3052; // Logic error: %-.256s in function %s.
    const ER_STD_RUNTIME_ERROR = 3053; // Runtime error: %-.256s in function %s.
    const ER_STD_UNKNOWN_EXCEPTION = 3054; // Unknown exception: %-.384s in function %s.
    const ER_GIS_DATA_WRONG_ENDIANESS = 3055; // Geometry byte string must be little endian.
    const ER_CHANGE_MASTER_PASSWORD_LENGTH = 3056; // The password provided for the replication user exceeds the maximum length of 32 characters
    const ER_USER_LOCK_WRONG_NAME = 3057; // Incorrect user-level lock name '%-.192s'.
    const ER_USER_LOCK_DEADLOCK = 3058; // Deadlock found when trying to get user-level lock; try rolling back transaction/releasing locks and restarting lock acquisition.
    const ER_REPLACE_INACCESSIBLE_ROWS = 3059; // REPLACE cannot be executed as it requires deleting rows that are not in the view
    const ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_GIS = 3060; // Do not support online operation on table with GIS index
    const ER_COMMULTI_BADCONTEXT = 4000; // COM_MULTI can't return a result set in the given context
    const ER_BAD_COMMAND_IN_MULTI = 4001; // Command '%s' is not allowed for COM_MULTI
    const ER_WITH_COL_WRONG_LIST = 4002; // WITH column list and SELECT field list have different column counts
    const ER_TOO_MANY_DEFINITIONS_IN_WITH_CLAUSE = 4003; // Too many WITH elements in WITH clause
    const ER_DUP_QUERY_NAME = 4004; // Duplicate query name %`-.64s in WITH clause
    const ER_RECURSIVE_WITHOUT_ANCHORS = 4005; // No anchors for recursive WITH element '%s'
    const ER_UNACCEPTABLE_MUTUAL_RECURSION = 4006; // Unacceptable mutual recursion with anchored table '%s'
    const ER_REF_TO_RECURSIVE_WITH_TABLE_IN_DERIVED = 4007; // Reference to recursive WITH table '%s' in materialized derived
    const ER_NOT_STANDARD_COMPLIANT_RECURSIVE = 4008; // Restrictions imposed on recursive definitions are violated for table '%s'"R_WRONG_WINDOW_SPEC_NAME
    const ER_WRONG_WINDOW_SPEC_NAME = 4009; // Window specification with name '%s' is not defined
    const ER_DUP_WINDOW_NAME = 4010; // Multiple window specifications with the same name '%s'
    const ER_PARTITION_LIST_IN_REFERENCING_WINDOW_SPEC = 4011; // Window specification referencing another one '%s' cannot contain partition list
    const ER_ORDER_LIST_IN_REFERENCING_WINDOW_SPEC = 4012; // Referenced window specification '%s' already contains order list
    const ER_WINDOW_FRAME_IN_REFERENCED_WINDOW_SPEC = 4013; // Referenced window specification '%s' cannot contain window frame
    const ER_BAD_COMBINATION_OF_WINDOW_FRAME_BOUND_SPECS = 4014; // Unacceptable combination of window frame bound specifications
    const ER_WRONG_PLACEMENT_OF_WINDOW_FUNCTION = 4015; // Window function is allowed only in SELECT list and ORDER BY clause
    const ER_WINDOW_FUNCTION_IN_WINDOW_SPEC = 4016; // Window function is not allowed in window specification
    const ER_NOT_ALLOWED_WINDOW_FRAME = 4017; // Window frame is not allowed with '%s'
    const ER_NO_ORDER_LIST_IN_WINDOW_SPEC = 4018; // No order list in window specification for '%s'
    const ER_RANGE_FRAME_NEEDS_SIMPLE_ORDERBY = 4019; // RANGE-type frame requires ORDER BY clause with single sort key
    const ER_WRONG_TYPE_FOR_ROWS_FRAME = 4020; // Integer is required for ROWS-type frame
    const ER_WRONG_TYPE_FOR_RANGE_FRAME = 4021; // Numeric datatype is required for RANGE-type frame
    const ER_FRAME_EXCLUSION_NOT_SUPPORTED = 4022; // Frame exclusion is not supported yet
    const ER_WINDOW_FUNCTION_DONT_HAVE_FRAME = 4023; // This window function may not have a window frame
    const ER_INVALID_NTILE_ARGUMENT = 4024; // Argument of NTILE must be greater than 0
    const ER_CONSTRAINT_FAILED = 4025; // CONSTRAINT %`s failed for %`-.192s.%`-.192s
    const ER_EXPRESSION_IS_TOO_BIG = 4026; // Expression in the %s clause is too big
    const ER_ERROR_EVALUATING_EXPRESSION = 4027; // Got an error evaluating stored expression %s
    const ER_CALCULATING_DEFAULT_VALUE = 4028; // Got an error when calculating default value for %`s
    const ER_EXPRESSION_REFERS_TO_UNINIT_FIELD = 4029; // Expression for field %`-.64s is referring to uninitialized field %`s
    const ER_PARTITION_DEFAULT_ERROR = 4030; // Only one DEFAULT partition allowed
    const ER_REFERENCED_TRG_DOES_NOT_EXIST = 4031; // Referenced trigger '%s' for the given action time and event type does not exist
    const ER_INVALID_DEFAULT_PARAM = 4032; // Default/ignore value is not supported for such parameter usage
    const ER_BINLOG_NON_SUPPORTED_BULK = 4033; // Only row based replication supported for bulk operations
    const ER_BINLOG_UNCOMPRESS_ERROR = 4034; // Uncompress the compressed binlog failed
    const ER_JSON_BAD_CHR = 4035; // Broken JSON string in argument %d to function '%s' at position %d
    const ER_JSON_NOT_JSON_CHR = 4036; // Character disallowed in JSON in argument %d to function '%s' at position %d
    const ER_JSON_EOS = 4037; // Unexpected end of JSON text in argument %d to function '%s'
    const ER_JSON_SYNTAX = 4038; // Syntax error in JSON text in argument %d to function '%s' at position %d
    const ER_JSON_ESCAPING = 4039; // Incorrect escaping in JSON text in argument %d to function '%s' at position %d
    const ER_JSON_DEPTH = 4040; // Limit of %d on JSON nested strucures depth is reached in argument %d to function '%s' at position %d
    const ER_JSON_PATH_EOS = 4041; // Unexpected end of JSON path in argument %d to function '%s'
    const ER_JSON_PATH_SYNTAX = 4042; // Syntax error in JSON path in argument %d to function '%s' at position %d
    const ER_JSON_PATH_DEPTH = 4043; // Limit of %d on JSON path depth is reached in argument %d to function '%s' at position %d
    const ER_JSON_PATH_NO_WILDCARD = 4044; // Wildcards in JSON path not allowed in argument %d to function '%s'
    const ER_JSON_PATH_ARRAY = 4045; // JSON path should end with an array identifier in argument %d to function '%s'
    const ER_JSON_ONE_OR_ALL = 4046; // Argument 2 to function '%s' must be "one" or "all".
    const ER_UNSUPPORT_COMPRESSED_TEMPORARY_TABLE = 4047; // CREATE TEMPORARY TABLE is not allowed with ROW_FORMAT=COMPRESSED or KEY_BLOCK_SIZE.
    const ER_GEOJSON_INCORRECT = 4048; // Incorrect GeoJSON format specified for st_geomfromgeojson function.
    const ER_GEOJSON_TOO_FEW_POINTS = 4049; // Incorrect GeoJSON format - too few points for linestring specified.
    const ER_GEOJSON_NOT_CLOSED = 4050; // Incorrect GeoJSON format - polygon not closed.
    const ER_JSON_PATH_EMPTY = 4051; // Path expression '$' is not allowed in argument %d to function '%s'.
    const ER_SLAVE_SAME_ID = 4052; // A slave with the same server_uuid/server_id as this slave has connected to the master
    const ER_FLASHBACK_NOT_SUPPORTED = 4053; // Flashback does not support %s %s
    const ER_KEYS_OUT_OF_ORDER = 4054; // Keys are out order during bulk load
    const ER_OVERLAPPING_KEYS = 4055; // Bulk load rows overlap existing rows
    const ER_REQUIRE_ROW_BINLOG_FORMAT = 4056; // Can't execute updates on master with binlog_format != ROW.
    const ER_ISOLATION_MODE_NOT_SUPPORTED = 4057; // MyRocks supports only READ COMMITTED and REPEATABLE READ isolation levels. Please change from current isolation level %s
    const ER_ON_DUPLICATE_DISABLED = 4058; // When unique checking is disabled in MyRocks, INSERT,UPDATE,LOAD statements with clauses that update or replace the key (i.e. INSERT ON DUPLICATE KEY UPDATE, REPLACE) are not allowed. Query: %s
    const ER_UPDATES_WITH_CONSISTENT_SNAPSHOT = 4059; // Can't execute updates when you started a transaction with START TRANSACTION WITH CONSISTENT [ROCKSDB] SNAPSHOT.
    const ER_ROLLBACK_ONLY = 4060; // This transaction was rolled back and cannot be committed. Only supported operation is to roll it back, so all pending changes will be discarded. Please restart another transaction.
    const ER_ROLLBACK_TO_SAVEPOINT = 4061; // MyRocks currently does not support ROLLBACK TO SAVEPOINT if modifying rows.
    const ER_ISOLATION_LEVEL_WITH_CONSISTENT_SNAPSHOT = 4062; // Only REPEATABLE READ isolation level is supported for START TRANSACTION WITH CONSISTENT SNAPSHOT in RocksDB Storage Engine.
    const ER_UNSUPPORTED_COLLATION = 4063; // Unsupported collation on string indexed column %s.%s Use binary collation (%s).
    const ER_METADATA_INCONSISTENCY = 4064; // Table '%s' does not exist, but metadata information exists inside MyRocks. This is a sign of data inconsistency. Please check if '%s.frm' exists, and try to restore it if it does not exist.
    const ER_CF_DIFFERENT = 4065; // Column family ('%s') flag (%d) is different from an existing flag (%d). Assign a new CF flag, or do not change existing CF flag.
    const ER_RDB_TTL_DURATION_FORMAT = 4066; // TTL duration (%s) in MyRocks must be an unsigned non-null 64-bit integer.
    const ER_RDB_STATUS_GENERAL = 4067; // Status error %d received from RocksDB: %s
    const ER_RDB_STATUS_MSG = 4068; // %s, Status error %d received from RocksDB: %s
    const ER_RDB_TTL_UNSUPPORTED = 4069; // TTL support is currently disabled when table has a hidden PK.
    const ER_RDB_TTL_COL_FORMAT = 4070; // TTL column (%s) in MyRocks must be an unsigned non-null 64-bit integer, exist inside the table, and have an accompanying ttl duration.
    const ER_PER_INDEX_CF_DEPRECATED = 4071; // The per-index column family option has been deprecated
    const ER_KEY_CREATE_DURING_ALTER = 4072; // MyRocks failed creating new key definitions during alter.
    const ER_SK_POPULATE_DURING_ALTER = 4073; // MyRocks failed populating secondary key during alter.
    const ER_SUM_FUNC_WITH_WINDOW_FUNC_AS_ARG = 4074; // Window functions can not be used as arguments to group functions.
    const ER_NET_OK_PACKET_TOO_LARGE = 4075; // OK packet too large
    const ER_GEOJSON_EMPTY_COORDINATES = 4076; // Incorrect GeoJSON format - empty 'coordinates' array.
    const ER_MYROCKS_CANT_NOPAD_COLLATION = 4077; // MyRocks doesn't currently support collations with \"No pad\" attribute.
    const ER_ILLEGAL_PARAMETER_DATA_TYPES2_FOR_OPERATION = 4078; // Illegal parameter data types %s and %s for operation '%s'
    const ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION = 4079; // Illegal parameter data type %s for operation '%s'
    const ER_WRONG_PARAMCOUNT_TO_CURSOR = 4080; // Incorrect parameter count to cursor '%-.192s'
    const ER_UNKNOWN_STRUCTURED_VARIABLE = 4081; // Unknown structured system variable or ROW routine variable '%-.*s'
    const ER_ROW_VARIABLE_DOES_NOT_HAVE_FIELD = 4082; // Row variable '%-.192s' does not have a field '%-.192s'
    const ER_END_IDENTIFIER_DOES_NOT_MATCH = 4083; // END identifier '%-.192s' does not match '%-.192s'
    const ER_SEQUENCE_RUN_OUT = 4084; // Sequence '%-.64s.%-.64s' has run out
    const ER_SEQUENCE_INVALID_DATA = 4085; // Sequence '%-.64s.%-.64s' values are conflicting
    const ER_SEQUENCE_INVALID_TABLE_STRUCTURE = 4086; // Sequence '%-.64s.%-.64s' table structure is invalid (%s)
    const ER_SEQUENCE_ACCESS_ERROR = 4087; // Sequence '%-.64s.%-.64s' access error
    const ER_SEQUENCE_BINLOG_FORMAT = 4088; // Sequences requires binlog_format mixed or row
    const ER_NOT_SEQUENCE = 4089; // '%-.64s.%-.64s' is not a SEQUENCE
    const ER_NOT_SEQUENCE2 = 4090; // '%-.192s' is not a SEQUENCE
    const ER_UNKNOWN_SEQUENCES = 4091; // Unknown SEQUENCE: '%-.300s'
    const ER_UNKNOWN_VIEW = 4092; // Unknown VIEW: '%-.300s'
    const ER_WRONG_INSERT_INTO_SEQUENCE = 4093; // Wrong INSERT into a SEQUENCE. One can only do single table INSERT into a sequence object (like with mysqldump).  If you want to change the SEQUENCE, use ALTER SEQUENCE instead.
    const ER_SP_STACK_TRACE = 4094; // At line %u in %s
    const ER_PACKAGE_ROUTINE_IN_SPEC_NOT_DEFINED_IN_BODY = 4095; // Subroutine '%-.192s' is declared in the package specification but is not defined in the package body
    const ER_PACKAGE_ROUTINE_FORWARD_DECLARATION_NOT_DEFINED = 4096; // Subroutine '%-.192s' has a forward declaration but is not defined
    const ER_COMPRESSED_COLUMN_USED_AS_KEY = 4097; // Compressed column '%-.192s' can't be used in key specification
    const ER_UNKNOWN_COMPRESSION_METHOD = 4098; // Unknown compression method: %s
    const ER_WRONG_NUMBER_OF_VALUES_IN_TVC = 4099; // The used table value constructor has a different number of values
    const ER_FIELD_REFERENCE_IN_TVC = 4100; // Field reference '%-.192s' can't be used in table value constructor
    const ER_WRONG_TYPE_FOR_PERCENTILE_FUNC = 4101; // Numeric datatype is required for %s function
    const ER_ARGUMENT_NOT_CONSTANT = 4102; // Argument to the %s function is not a constant for a partition
    const ER_ARGUMENT_OUT_OF_RANGE = 4103; // Argument to the %s function does not belong to the range [0,1]
    const ER_WRONG_TYPE_OF_ARGUMENT = 4104; // %s function only accepts arguments that can be converted to numerical types
    const ER_NOT_AGGREGATE_FUNCTION = 4105; // Aggregate specific instruction (FETCH GROUP NEXT ROW) used in a wrong context
    const ER_INVALID_AGGREGATE_FUNCTION = 4106; // Aggregate specific instruction(FETCH GROUP NEXT ROW) missing from the aggregate function
    const ER_INVALID_VALUE_TO_LIMIT = 4107; // Limit only accepts integer values
    const ER_INVISIBLE_NOT_NULL_WITHOUT_DEFAULT = 4108; // Invisible column %`s must have a default value
    const ER_UPDATE_INFO_WITH_SYSTEM_VERSIONING = 4109; // Rows matched: %ld  Changed: %ld  Inserted: %ld  Warnings: %ld
    const ER_VERS_FIELD_WRONG_TYPE = 4110; // %`s must be of type %s for system-versioned table %`s
    const ER_VERS_ENGINE_UNSUPPORTED = 4111; // Transaction-precise system versioning for %`s is not supported
    const ER_UNUSED_23 = 4112; // You should never see it
    const ER_PARTITION_WRONG_TYPE = 4113; // Wrong partitioning type, expected type: %`s
    const WARN_VERS_PART_FULL = 4114; // Versioned table %`s.%`s: last HISTORY partition (%`s) is out of %s, need more HISTORY partitions
    const WARN_VERS_PARAMETERS = 4115; // Maybe missing parameters: %s
    const ER_VERS_DROP_PARTITION_INTERVAL = 4116; // Can only drop oldest partitions when rotating by INTERVAL
    const ER_UNUSED_25 = 4117; // You should never see it
    const WARN_VERS_PART_NON_HISTORICAL = 4118; // Partition %`s contains non-historical data
    const ER_VERS_ALTER_NOT_ALLOWED = 4119; // Not allowed for system-versioned %`s.%`s. Change @@system_versioning_alter_history to proceed with ALTER.
    const ER_VERS_ALTER_ENGINE_PROHIBITED = 4120; // Not allowed for system-versioned %`s.%`s. Change to/from native system versioning engine is not supported.
    const ER_VERS_RANGE_PROHIBITED = 4121; // SYSTEM_TIME range selector is not allowed
    const ER_CONFLICTING_FOR_SYSTEM_TIME = 4122; // Conflicting FOR SYSTEM_TIME clauses in WITH RECURSIVE
    const ER_VERS_TABLE_MUST_HAVE_COLUMNS = 4123; // Table %`s must have at least one versioned column
    const ER_VERS_NOT_VERSIONED = 4124; // Table %`s is not system-versioned
    const ER_MISSING = 4125; // Wrong parameters for %`s: missing '%s'
    const ER_VERS_PERIOD_COLUMNS = 4126; // PERIOD FOR SYSTEM_TIME must use columns %`s and %`s
    const ER_PART_WRONG_VALUE = 4127; // Wrong parameters for partitioned %`s: wrong value for '%s'
    const ER_VERS_WRONG_PARTS = 4128; // Wrong partitions for %`s: must have at least one HISTORY and exactly one last CURRENT
    const ER_VERS_NO_TRX_ID = 4129; // TRX_ID %llu not found in `mysql.transaction_registry`
    const ER_VERS_ALTER_SYSTEM_FIELD = 4130; // Can not change system versioning field %`s
    const ER_DROP_VERSIONING_SYSTEM_TIME_PARTITION = 4131; // Can not DROP SYSTEM VERSIONING for table %`s partitioned BY SYSTEM_TIME
    const ER_VERS_DB_NOT_SUPPORTED = 4132; // System-versioned tables in the %`s database are not supported
    const ER_VERS_TRT_IS_DISABLED = 4133; // Transaction registry is disabled
    const ER_VERS_DUPLICATE_ROW_START_END = 4134; // Duplicate ROW %s column %`s
    const ER_VERS_ALREADY_VERSIONED = 4135; // Table %`s is already system-versioned
    const ER_UNUSED_24 = 4136; // You should never see it
    const ER_VERS_NOT_SUPPORTED = 4137; // System-versioned tables do not support %s
    const ER_VERS_TRX_PART_HISTORIC_ROW_NOT_SUPPORTED = 4138; // Transaction-precise system-versioned tables do not support partitioning by ROW START or ROW END
    const ER_INDEX_FILE_FULL = 4139; // The index file for table '%-.192s' is full
    const ER_UPDATED_COLUMN_ONLY_ONCE = 4140; // The column %`s.%`s cannot be changed more than once in a single UPDATE statement
    const ER_EMPTY_ROW_IN_TVC = 4141; // Row with no elements is not allowed in table value constructor in this context
    const ER_VERS_QUERY_IN_PARTITION = 4142; // SYSTEM_TIME partitions in table %`s does not support historical query
    const ER_KEY_DOESNT_SUPPORT = 4143; // %s index %`s does not support this operation
    const ER_ALTER_OPERATION_TABLE_OPTIONS_NEED_REBUILD = 4144; // Changing table options requires the table to be rebuilt
    const ER_BACKUP_LOCK_IS_ACTIVE = 4145; // Can't execute the command as you have a BACKUP STAGE active
    const ER_BACKUP_NOT_RUNNING = 4146; // You must start backup with \"BACKUP STAGE START\"
    const ER_BACKUP_WRONG_STAGE = 4147; // Backup stage '%s' is same or before current backup stage '%s'
    const ER_BACKUP_STAGE_FAILED = 4148; // Backup stage '%s' failed
    const ER_BACKUP_UNKNOWN_STAGE = 4149; // Unknown backup stage: '%s'. Stage should be one of START, FLUSH, BLOCK_DDL, BLOCK_COMMIT or END
    const ER_USER_IS_BLOCKED = 4150; // User is blocked because of too many credential errors; unblock with 'FLUSH PRIVILEGES'
    const ER_ACCOUNT_HAS_BEEN_LOCKED = 4151; // Access denied, this account is locked
    const ER_PERIOD_TEMPORARY_NOT_ALLOWED = 4152; // Application-time period table cannot be temporary
    const ER_PERIOD_TYPES_MISMATCH = 4153; // Fields of PERIOD FOR %`s have different types
    const ER_MORE_THAN_ONE_PERIOD = 4154; // Cannot specify more than one application-time period
    const ER_PERIOD_FIELD_WRONG_ATTRIBUTES = 4155; // Period field %`s cannot be %s
    const ER_PERIOD_NOT_FOUND = 4156; // Period %`s is not found in table
    const ER_PERIOD_COLUMNS_UPDATED = 4157; // Column %`s used in period %`s specified in update SET list
    const ER_PERIOD_CONSTRAINT_DROP = 4158; // Can't DROP CONSTRAINT `%s`. Use DROP PERIOD `%s` for this
    const ER_TOO_LONG_KEYPART = 4159; // Specified key part was too long; max key part length is %u bytes
    const ER_TOO_LONG_DATABASE_COMMENT = 4160; // Comment for database '%-.64s' is too long (max = %u)
    const ER_UNKNOWN_DATA_TYPE = 4161; // Unknown data type: '%-.64s'
    const ER_UNKNOWN_OPERATOR = 4162; // Operator does not exists: '%-.128s'
    const ER_WARN_HISTORY_ROW_START_TIME = 4163; // Table `%s.%s` history row start '%s' is later than row end '%s'
    const ER_PART_STARTS_BEYOND_INTERVAL = 4164; // %`s: STARTS is later than query time, first history partition may exceed INTERVAL value
    const ER_GALERA_REPLICATION_NOT_SUPPORTED = 4165; // DDL-statement is forbidden as table storage engine does not support Galera replication
    const ER_LOAD_INFILE_CAPABILITY_DISABLED = 4166; // The used command is not allowed because the MariaDB server or client has disabled the local infile capability
    const ER_NO_SECURE_TRANSPORTS_CONFIGURED = 4167; // No secure transports are configured, unable to set --require_secure_transport=ON
    const ER_SLAVE_IGNORED_SHARED_TABLE = 4168; // Slave SQL thread ignored the '%s' because table is shared
    const ER_NO_AUTOINCREMENT_WITH_UNIQUE = 4169; // AUTO_INCREMENT column %`s cannot be used in the UNIQUE index %`s
    const ER_KEY_CONTAINS_PERIOD_FIELDS = 4170; // Key %`s cannot explicitly include column %`s
    const ER_KEY_CANT_HAVE_WITHOUT_OVERLAPS = 4171; // Key %`s cannot have WITHOUT OVERLAPS
    const ER_NOT_ALLOWED_IN_THIS_CONTEXT = 4172; // '%-.128s' is not allowed in this context
    const ER_DATA_WAS_COMMITED_UNDER_ROLLBACK = 4173; // Engine %s does not support rollback. Changes where commited during rollback call

}